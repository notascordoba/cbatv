#!/usr/bin/env python3
"""
Sistema SEO Profesional para automatizaci√≥n period√≠stica v2.0.6
Bot que convierte cr√≥nicas en art√≠culos SEO optimizados para WordPress
Base s√≥lida sin errores de inicializaci√≥n + caracter√≠sticas SEO avanzadas + Manejo robusto de SSL

VERSI√ìN: 2.0.6
FECHA: 2025-09-21
CAMBIOS:
+ Obtenci√≥n autom√°tica de categor√≠as de WordPress usando XML-RPC
+ Validaci√≥n estricta de categor√≠as (prohibido crear nuevas)
+ Prompt inteligente con categor√≠as disponibles del sitio
+ Adaptabilidad multi-sitio para diferentes tem√°ticas
+ Cache de categor√≠as para optimizar rendimiento
+ Fallbacks inteligentes en caso de problemas de conexi√≥n
+ Configuraci√≥n autom√°tica de imagen destacada en WordPress
+ Optimizaci√≥n de redimensionado a 1200x675px como featured image
+ CORRECCI√ìN CR√çTICA: Flujo de generaci√≥n de art√≠culos mejorado y robusto
+ CORRECCI√ìN: Manejo consistente de errores y fallbacks
+ CORRECCI√ìN FINAL: Import correcto de wordpress_xmlrpc sin errores
+ CORRECCI√ìN SSL v2.0.6: Sistema robusto para manejo de errores SSL/TLS
+ SISTEMA DE REINTENTOS: Backoff exponencial para subida de im√°genes
+ TIMEOUT CONFIGURABLES: Mejor manejo de timeouts de conexi√≥n
+ VALIDACI√ìN MEJORADA: Verificaci√≥n previa de conexi√≥n antes de subir
"""

import os
import asyncio
import aiohttp
import aiofiles
from datetime import datetime
import json
import re
from PIL import Image
import io
import base64
import logging
from typing import Optional, Dict, List, Tuple
import ssl
import socket
import time

# Imports espec√≠ficos de WordPress
import wordpress_xmlrpc
from wordpress_xmlrpc import Client, WordPressPost
from wordpress_xmlrpc.methods import posts, media
from wordpress_xmlrpc.methods.taxonomies import GetTerms

# Imports de Telegram
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# Import de OpenAI
from openai import AsyncOpenAI

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class WordPressSEOBot:
    """
    Bot profesional para convertir mensajes de Telegram en art√≠culos SEO optimizados
    
    Funcionalidades principales:
    - Recibe texto/imagen/audio desde Telegram
    - Genera art√≠culos SEO completos usando IA
    - Redimensiona im√°genes a tama√±o √≥ptimo (1200x675px)
    - Configura autom√°ticamente imagen destacada en WordPress
    - Obtiene categor√≠as din√°micamente de cada sitio WordPress
    - Valida categor√≠as antes de publicar (no crea nuevas)
    - Publica directamente en WordPress con metadatos SEO
    - NUEVO v2.0.6: Manejo robusto de errores SSL/TLS
    """
    
    def __init__(self):
        """Inicializa el bot con configuraci√≥n desde variables de entorno"""
        
        # Tokens y configuraci√≥n principal
        self.telegram_token = os.getenv('TELEGRAM_TOKEN')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.wordpress_url = os.getenv('WORDPRESS_URL')
        self.wordpress_user = os.getenv('WORDPRESS_USER')  
        self.wordpress_password = os.getenv('WORDPRESS_PASSWORD')
        
        # IDs autorizados (convertir de string separado por comas)
        authorized_ids_str = os.getenv('AUTHORIZED_USER_IDS', '')
        self.authorized_user_ids = []
        if authorized_ids_str:
            try:
                self.authorized_user_ids = [int(uid.strip()) for uid in authorized_ids_str.split(',') if uid.strip()]
            except ValueError:
                logger.warning("‚ùå Error parseando AUTHORIZED_USER_IDS - se requiere formato: id1,id2,id3")
        
        # Configuraci√≥n de imagen
        self.TARGET_WIDTH = int(os.getenv('IMAGE_WIDTH', 1200))
        self.TARGET_HEIGHT = int(os.getenv('IMAGE_HEIGHT', 675))
        self.IMAGE_QUALITY = int(os.getenv('IMAGE_QUALITY', 85))
        
        # Configuraci√≥n de IA
        self.ai_model = os.getenv('AI_MODEL', 'gpt-4o-mini')
        self.max_tokens = int(os.getenv('MAX_TOKENS', 4000))
        
        # Configuraci√≥n WordPress
        self.wp_timeout = int(os.getenv('WP_TIMEOUT', 30))
        
        # NUEVO v2.0.6: Configuraci√≥n SSL y reintentos
        self.max_retries = int(os.getenv('MAX_RETRIES', 3))
        self.retry_delay_base = float(os.getenv('RETRY_DELAY_BASE', 2.0))
        self.ssl_verify = os.getenv('SSL_VERIFY', 'true').lower() == 'true'
        
        # Variables de estado
        self.telegram_app = None
        self.openai_client = None
        self.wp_client = None
        self.available_categories = []
        self.categories_cache_time = None
        self.logger = logger
        
        # NUEVO v2.0.6: Validaci√≥n de configuraci√≥n SSL
        logger.info(f"üîí Configuraci√≥n SSL: verificar={self.ssl_verify}, reintentos={self.max_retries}")

    async def init_clients(self):
        """
        Inicializa todos los clientes necesarios (Telegram, OpenAI, WordPress)
        
        NUEVO v2.0.4: Incluye cache de categor√≠as disponibles
        NUEVO v2.0.6: Configuraci√≥n SSL mejorada para WordPress
        """
        try:
            success_count = 0
            
            # 1. Cliente de Telegram
            if self.telegram_token:
                try:
                    self.telegram_app = Application.builder().token(self.telegram_token).build()
                    logger.info("‚úÖ Cliente Telegram conectado")
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Error conectando Telegram: {e}")
            
            # 2. Cliente OpenAI
            if self.openai_api_key:
                try:
                    self.openai_client = AsyncOpenAI(api_key=self.openai_api_key)
                    logger.info("‚úÖ Cliente OpenAI conectado")
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Error conectando OpenAI: {e}")
            
            # 3. Cliente WordPress con configuraci√≥n SSL robusta
            if self.wordpress_url and self.wordpress_user and self.wordpress_password:
                try:
                    wp_url = f"{self.wordpress_url.rstrip('/')}/xmlrpc.php"
                    
                    # NUEVO v2.0.6: Configuraci√≥n SSL robusta
                    self.wp_client = self._create_wordpress_client_with_ssl(wp_url)
                    
                    # Probar conexi√≥n con reintento
                    await self._test_wordpress_connection()
                    logger.info("‚úÖ Cliente WordPress conectado con SSL robusto")
                    success_count += 1
                    
                    # NUEVO v2.0.4: Obtener categor√≠as disponibles del sitio
                    await self._fetch_wordpress_categories()
                    
                except Exception as e:
                    logger.error(f"‚ùå Error conectando WordPress: {e}")
            
            # Verificar conexiones m√≠nimas
            if success_count >= 2:
                logger.info(f"üöÄ Bot inicializado correctamente ({success_count}/3 servicios)")
                return True
            else:
                logger.error(f"‚ùå Bot requiere al menos 2/3 servicios ({success_count}/3 conectados)")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en inicializaci√≥n: {e}")
            return False

    def _create_wordpress_client_with_ssl(self, wp_url: str) -> Client:
        """
        NUEVO v2.0.6: Crea cliente WordPress con configuraci√≥n SSL robusta
        """
        try:
            # Configurar SSL context si es necesario
            if not self.ssl_verify:
                logger.warning("‚ö†Ô∏è SSL verification disabled - use only for testing")
                import urllib3
                urllib3.disable_warnings()
            
            # Crear cliente con timeout extendido
            client = Client(wp_url, self.wordpress_user, self.wordpress_password)
            
            # NUEVO v2.0.6: Configurar timeout en el transporte
            if hasattr(client.transport, 'timeout'):
                client.transport.timeout = self.wp_timeout
                
            return client
            
        except Exception as e:
            logger.error(f"‚ùå Error creando cliente WordPress SSL: {e}")
            raise

    async def _test_wordpress_connection(self):
        """
        NUEVO v2.0.6: Prueba conexi√≥n WordPress con reintentos
        """
        for attempt in range(self.max_retries):
            try:
                # Probar conexi√≥n b√°sica
                test_methods = self.wp_client.call(wordpress_xmlrpc.methods.demo.SayHello())
                logger.info(f"‚úÖ Conexi√≥n WordPress verificada (intento {attempt + 1})")
                return True
                
            except (ssl.SSLError, socket.error, ConnectionError) as e:
                logger.warning(f"‚ö†Ô∏è Error SSL/conexi√≥n intento {attempt + 1}: {e}")
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay_base * (2 ** attempt)
                    logger.info(f"üîÑ Reintentando en {delay}s...")
                    await asyncio.sleep(delay)
                else:
                    raise
                    
            except Exception as e:
                logger.error(f"‚ùå Error inesperado probando WordPress: {e}")
                raise

    async def _fetch_wordpress_categories(self):
        """
        NUEVO v2.0.4: Obtiene categor√≠as disponibles del sitio WordPress
        MODIFICADO v2.0.6: Con manejo robusto de errores SSL
        """
        try:
            if not self.wp_client:
                logger.warning("‚ö†Ô∏è Cliente WordPress no disponible para obtener categor√≠as")
                return
            
            # Verificar cache (v√°lido por 1 hora)
            if (self.categories_cache_time and 
                (datetime.now() - self.categories_cache_time).seconds < 3600 and 
                self.available_categories):
                logger.info(f"üìã Usando cache de categor√≠as ({len(self.available_categories)} disponibles)")
                return
            
            # Obtener categor√≠as con reintentos
            for attempt in range(self.max_retries):
                try:
                    # Obtener todas las categor√≠as
                    categories = self.wp_client.call(GetTerms('category'))
                    
                    if categories:
                        self.available_categories = [
                            {
                                'id': cat.id,
                                'name': cat.name,
                                'slug': cat.slug
                            }
                            for cat in categories
                        ]
                        self.categories_cache_time = datetime.now()
                        logger.info(f"‚úÖ Categor√≠as obtenidas: {len(self.available_categories)} disponibles")
                        
                        # Log de categor√≠as disponibles
                        category_names = [cat['name'] for cat in self.available_categories]
                        logger.info(f"üìÇ Categor√≠as: {', '.join(category_names)}")
                        return
                    else:
                        logger.warning("‚ö†Ô∏è No se encontraron categor√≠as en WordPress")
                        return
                        
                except (ssl.SSLError, socket.error, ConnectionError) as e:
                    logger.warning(f"‚ö†Ô∏è Error SSL obteniendo categor√≠as (intento {attempt + 1}): {e}")
                    if attempt < self.max_retries - 1:
                        delay = self.retry_delay_base * (2 ** attempt)
                        await asyncio.sleep(delay)
                    else:
                        logger.error("‚ùå No se pudieron obtener categor√≠as despu√©s de todos los reintentos")
                        
                except Exception as e:
                    logger.error(f"‚ùå Error obteniendo categor√≠as: {e}")
                    break
                    
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico obteniendo categor√≠as: {e}")

    def _validate_environment(self):
        """Valida que todas las variables de entorno necesarias est√©n configuradas"""
        
        required_vars = {
            'TELEGRAM_TOKEN': self.telegram_token,
            'OPENAI_API_KEY': self.openai_api_key,
            'WORDPRESS_URL': self.wordpress_url,
            'WORDPRESS_USER': self.wordpress_user,
            'WORDPRESS_PASSWORD': self.wordpress_password,
            'AUTHORIZED_USER_IDS': len(self.authorized_user_ids) > 0
        }
        
        missing_vars = []
        for var_name, var_value in required_vars.items():
            if not var_value:
                missing_vars.append(var_name)
        
        if missing_vars:
            logger.error(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
            return False
        
        logger.info("‚úÖ Todas las variables de entorno est√°n configuradas")
        return True

    def _is_authorized_user(self, user_id: int) -> bool:
        """Verifica si el usuario est√° autorizado para usar el bot"""
        is_authorized = user_id in self.authorized_user_ids
        if not is_authorized:
            logger.warning(f"‚ö†Ô∏è Usuario no autorizado: {user_id}")
        return is_authorized

    async def _extract_content_from_message(self, update: Update) -> Dict:
        """
        Extrae contenido (texto, imagen) del mensaje de Telegram
        
        Returns:
            Dict con keys: 'text', 'image_data', 'has_content'
        """
        content = {
            'text': '',
            'image_data': None,
            'has_content': False
        }
        
        try:
            message = update.message
            
            # Extraer texto
            if message.text:
                content['text'] = message.text.strip()
                content['has_content'] = True
                logger.info(f"üìù Texto recibido: {len(content['text'])} caracteres")
            
            # Extraer imagen si existe
            if message.photo:
                try:
                    # Obtener la imagen de mayor resoluci√≥n
                    photo = max(message.photo, key=lambda p: p.width * p.height)
                    
                    # Descargar imagen
                    photo_file = await photo.get_file()
                    image_bytes = await photo_file.download_as_bytearray()
                    
                    content['image_data'] = bytes(image_bytes)
                    content['has_content'] = True
                    logger.info(f"üñºÔ∏è Imagen recibida: {len(content['image_data'])} bytes")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error descargando imagen: {e}")
            
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo contenido del mensaje: {e}")
            return content

    def resize_image(self, image_data: bytes) -> bytes:
        """
        Redimensiona imagen a 1200x675px manteniendo proporci√≥n y optimizando para web
        
        NUEVO v2.0.3: Implementa redimensionado inteligente con crop centrado
        """
        try:
            # Cargar imagen
            image = Image.open(io.BytesIO(image_data))
            
            # Convertir a RGB si es necesario
            if image.mode in ('RGBA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[-1])
                image = background
            elif image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Calcular proporci√≥n para crop centrado
            target_ratio = self.TARGET_WIDTH / self.TARGET_HEIGHT  # 16:9
            current_ratio = image.width / image.height
            
            if current_ratio > target_ratio:
                # Imagen muy ancha - crop horizontal
                new_width = int(image.height * target_ratio)
                left = (image.width - new_width) // 2
                image = image.crop((left, 0, left + new_width, image.height))
            elif current_ratio < target_ratio:
                # Imagen muy alta - crop vertical
                new_height = int(image.width / target_ratio)
                top = (image.height - new_height) // 2
                image = image.crop((0, top, image.width, top + new_height))
            
            # Redimensionar a tama√±o target
            image = image.resize((self.TARGET_WIDTH, self.TARGET_HEIGHT), Image.Resampling.LANCZOS)
            
            # Guardar como JPEG optimizado
            output = io.BytesIO()
            image.save(output, format='JPEG', quality=self.IMAGE_QUALITY, optimize=True)
            
            resized_data = output.getvalue()
            logger.info(f"‚úÖ Imagen redimensionada: {len(image_data)} ‚Üí {len(resized_data)} bytes ({self.TARGET_WIDTH}x{self.TARGET_HEIGHT})")
            
            return resized_data
            
        except Exception as e:
            logger.error(f"‚ùå Error redimensionando imagen: {e}")
            return image_data

    async def generate_seo_article(self, user_text: str) -> Dict:
        """
        Genera art√≠culo SEO completo usando OpenAI
        
        NUEVO v2.0.4: Incluye categor√≠as disponibles en el prompt para mayor precisi√≥n
        CORREGIDO v2.0.4: Manejo robusto de respuestas de IA y fallbacks
        """
        try:
            if not self.openai_client:
                logger.error("‚ùå Cliente OpenAI no disponible")
                return self._generate_fallback_article(user_text)
            
            # Preparar lista de categor√≠as disponibles para el prompt
            categories_text = ""
            if self.available_categories:
                category_names = [cat['name'] for cat in self.available_categories]
                categories_text = f"\n\nCategor√≠as disponibles en el sitio: {', '.join(category_names)}\nDEBES elegir UNA categor√≠a de esta lista (no crear nuevas)."
            else:
                categories_text = "\n\nNota: Usa una categor√≠a gen√©rica apropiada para el contenido."
            
            # Prompt optimizado con categor√≠as din√°micas
            prompt = f"""Eres un periodista experto en SEO. Convierte este texto en un art√≠culo period√≠stico profesional y optimizado.

TEXTO A PROCESAR:
{user_text}

{categories_text}

INSTRUCCIONES:
- Crear un art√≠culo period√≠stico completo y profesional
- Optimizar para SEO con palabras clave naturales
- Mantener un tono informativo y objetivo
- Incluir contexto relevante y detalles importantes
- El t√≠tulo debe ser atractivo y descriptivo
- La meta descripci√≥n debe resumir el art√≠culo en 150-160 caracteres

RESPONDE EN FORMATO JSON EXACTO (sin comentarios ni texto adicional):
{{
    "titulo_h1": "T√≠tulo principal del art√≠culo",
    "contenido_html": "<p>Contenido del art√≠culo en HTML con p√°rrafos, listas y estructura adecuada...</p>",
    "meta_description": "Descripci√≥n SEO de 150-160 caracteres",
    "categoria": "Nombre exacto de UNA categor√≠a de la lista disponible",
    "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"],
    "palabras_clave": ["palabra1", "palabra2", "palabra3"]
}}"""

            # Llamada a OpenAI
            logger.info("ü§ñ Generando art√≠culo con IA...")
            response = await self.openai_client.chat.completions.create(
                model=self.ai_model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Eres un periodista profesional experto en SEO. Respondes √öNICAMENTE en formato JSON v√°lido, sin comentarios ni texto adicional."
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=self.max_tokens,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ Respuesta de IA recibida: {len(ai_response)} caracteres")
            
            # Parsear respuesta JSON
            try:
                # Limpiar respuesta (remover markdown si existe)
                if ai_response.startswith('```json'):
                    ai_response = ai_response[7:]
                if ai_response.endswith('```'):
                    ai_response = ai_response[:-3]
                ai_response = ai_response.strip()
                
                article_data = json.loads(ai_response)
                
                # Validar estructura
                required_keys = ['titulo_h1', 'contenido_html', 'meta_description', 'categoria', 'tags', 'palabras_clave']
                if all(key in article_data for key in required_keys):
                    logger.info("‚úÖ Art√≠culo SEO generado correctamente")
                    return article_data
                else:
                    missing_keys = [key for key in required_keys if key not in article_data]
                    logger.error(f"‚ùå Claves faltantes en respuesta de IA: {missing_keys}")
                    return self._generate_fallback_article(user_text)
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON de IA: {e}")
                logger.error(f"Respuesta recibida: {ai_response[:200]}...")
                return self._generate_fallback_article(user_text)
                
        except Exception as e:
            logger.error(f"‚ùå Error generando art√≠culo con IA: {e}")
            return self._generate_fallback_article(user_text)
    
    async def upload_image_to_wordpress(self, image_data: bytes, filename: str) -> Tuple[Optional[str], Optional[int]]:
        """
        NUEVO v2.0.6: Sube imagen a WordPress con manejo robusto de SSL y reintentos
        """
        for attempt in range(self.max_retries):
            try:
                if not self.wp_client:
                    logger.error("‚ùå Cliente WordPress no disponible")
                    return None, None
                
                # Redimensionar imagen
                resized_image = self.resize_image(image_data)
                
                # Preparar datos para WordPress
                data = {
                    'name': filename,
                    'type': 'image/jpeg',
                    'bits': resized_image
                }
                
                logger.info(f"üì§ Subiendo imagen a WordPress (intento {attempt + 1})...")
                
                # Subir a WordPress con timeout extendido
                response = self.wp_client.call(media.UploadFile(data))
                
                if response and 'url' in response and 'id' in response:
                    logger.info(f"‚úÖ Imagen subida exitosamente: {response['url']} (ID: {response['id']})")
                    return response['url'], response['id']
                elif response and 'url' in response:
                    # Fallback si no hay ID en respuesta
                    logger.info(f"‚úÖ Imagen subida (sin ID): {response['url']}")
                    return response['url'], None
                else:
                    logger.error(f"‚ùå Respuesta inv√°lida de WordPress en intento {attempt + 1}")
                    if attempt < self.max_retries - 1:
                        delay = self.retry_delay_base * (2 ** attempt)
                        logger.info(f"üîÑ Reintentando subida en {delay}s...")
                        await asyncio.sleep(delay)
                        continue
                    return None, None
                    
            except (ssl.SSLError, ssl.SSLEOFError, ConnectionError, socket.error) as e:
                logger.warning(f"‚ö†Ô∏è Error SSL/conexi√≥n subiendo imagen (intento {attempt + 1}): {e}")
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay_base * (2 ** attempt)
                    logger.info(f"üîÑ Reintentando subida en {delay}s...")
                    await asyncio.sleep(delay)
                else:
                    logger.error("‚ùå Error SSL persistente - no se pudo subir imagen despu√©s de todos los reintentos")
                    return None, None
                    
            except Exception as e:
                logger.error(f"‚ùå Error inesperado subiendo imagen (intento {attempt + 1}): {e}")
                if attempt < self.max_retries - 1:
                    delay = self.retry_delay_base * (2 ** attempt)
                    await asyncio.sleep(delay)
                else:
                    return None, None
        
        return None, None

    async def publish_seo_article_to_wordpress(self, article_data: Dict, image_url: Optional[str] = None, image_id: Optional[int] = None) -> Tuple[Optional[int], Optional[str]]:
        """
        CORREGIDO v2.0.4: Publica art√≠culo SEO completo en WordPress con validaciones
        MODIFICADO v2.0.6: Con manejo robusto de errores SSL para configurar imagen destacada
        """
        try:
            if not self.wp_client:
                logger.error("‚ùå Cliente WordPress no disponible")
                return None, None
            
            # Validar que article_data tenga las claves necesarias
            if not article_data or 'titulo_h1' not in article_data:
                logger.error("‚ùå Datos de art√≠culo inv√°lidos o incompletos")
                return None, None
            
            # Crear post
            post = WordPressPost()
            post.title = article_data.get('titulo_h1', 'Art√≠culo Sin T√≠tulo')
            post.content = article_data.get('contenido_html', '<p>Contenido no disponible</p>')
            post.post_status = 'publish'
            
            # Configurar meta descripci√≥n si est√° disponible
            if 'meta_description' in article_data and article_data['meta_description']:
                post.excerpt = article_data['meta_description']
            
            # Buscar y configurar categor√≠a
            if 'categoria' in article_data and self.available_categories:
                category_name = article_data['categoria']
                category_found = False
                
                for cat in self.available_categories:
                    if cat['name'].lower() == category_name.lower():
                        post.terms_names = {'category': [cat['name']]}
                        logger.info(f"üìÇ Categor√≠a configurada: {cat['name']}")
                        category_found = True
                        break
                
                if not category_found:
                    logger.warning(f"‚ö†Ô∏è Categor√≠a '{category_name}' no encontrada, usando categor√≠a por defecto")
                    if self.available_categories:
                        post.terms_names = {'category': [self.available_categories[0]['name']]}
            
            # Configurar tags si est√°n disponibles
            if 'tags' in article_data and article_data['tags']:
                post.terms_names = post.terms_names or {}
                post.terms_names['post_tag'] = article_data['tags']
                logger.info(f"üè∑Ô∏è Tags configurados: {len(article_data['tags'])} tags")
            
            # Agregar imagen al contenido si existe
            if image_url:
                image_html = f'<div class="featured-image"><img src="{image_url}" alt="{post.title}" style="width: 100%; height: auto; margin: 20px 0;"></div>'
                post.content = image_html + post.content
            
            # Publicar art√≠culo con reintentos
            post_id = None
            for attempt in range(self.max_retries):
                try:
                    logger.info(f"üìù Publicando art√≠culo en WordPress (intento {attempt + 1})...")
                    post_id = self.wp_client.call(posts.NewPost(post))
                    logger.info(f"‚úÖ Art√≠culo publicado con ID: {post_id}")
                    break
                    
                except (ssl.SSLError, ConnectionError, socket.error) as e:
                    logger.warning(f"‚ö†Ô∏è Error SSL publicando art√≠culo (intento {attempt + 1}): {e}")
                    if attempt < self.max_retries - 1:
                        delay = self.retry_delay_base * (2 ** attempt)
                        await asyncio.sleep(delay)
                    else:
                        logger.error("‚ùå No se pudo publicar art√≠culo despu√©s de todos los reintentos")
                        return None, None
                        
                except Exception as e:
                    logger.error(f"‚ùå Error publicando art√≠culo: {e}")
                    return None, None
            
            if not post_id:
                return None, None
            
            # Configurar imagen destacada si est√° disponible
            if image_id and post_id:
                for attempt in range(self.max_retries):
                    try:
                        logger.info(f"üñºÔ∏è Configurando imagen destacada (intento {attempt + 1}) - Post ID: {post_id}, Image ID: {image_id}")
                        self.wp_client.call(posts.SetPostThumbnail(post_id, image_id))
                        logger.info("‚úÖ Imagen destacada configurada exitosamente")
                        break
                        
                    except (ssl.SSLError, ConnectionError, socket.error) as e:
                        logger.warning(f"‚ö†Ô∏è Error SSL configurando imagen destacada (intento {attempt + 1}): {e}")
                        if attempt < self.max_retries - 1:
                            delay = self.retry_delay_base * (2 ** attempt)
                            await asyncio.sleep(delay)
                        else:
                            logger.warning("‚ö†Ô∏è No se pudo configurar imagen destacada - continuando sin ella")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error configurando imagen destacada: {e}")
                        break
            
            # Construir URL del art√≠culo
            article_url = f"{self.wordpress_url.rstrip('/')}/{post_id}"
            
            return post_id, article_url
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico publicando art√≠culo: {e}")
            return None, None

    def _generate_fallback_article(self, user_text: str) -> Dict:
        """
        Genera art√≠culo de respaldo cuando falla la IA
        
        CORREGIDO v2.0.4: Estructura consistente con las claves esperadas
        """
        logger.info("üîÑ Generando art√≠culo de respaldo...")
        
        # Extraer t√≠tulo b√°sico del texto
        lines = user_text.strip().split('\n')
        title = lines[0][:100] if lines else "Art√≠culo Informativo"
        
        # Limpiar t√≠tulo
        title = re.sub(r'[^\w\s\-.,:]', '', title).strip()
        if not title:
            title = "Art√≠culo Informativo"
        
        # Generar contenido HTML b√°sico
        paragraphs = [line.strip() for line in lines if line.strip()]
        if not paragraphs:
            paragraphs = [user_text]
        
        content_html = ""
        for paragraph in paragraphs[:5]:  # M√°ximo 5 p√°rrafos
            if len(paragraph) > 20:  # Solo p√°rrafos significativos
                content_html += f"<p>{paragraph}</p>\n"
        
        if not content_html:
            content_html = f"<p>{user_text[:500]}...</p>"
        
        # Categor√≠a por defecto
        default_category = "General"
        if self.available_categories:
            default_category = self.available_categories[0]['name']
        
        return {
            'titulo_h1': title,
            'contenido_html': content_html,
            'meta_description': f"{title}. Informaci√≥n relevante y actualizada."[:160],
            'categoria': default_category,
            'tags': ['noticias', 'informaci√≥n'],
            'palabras_clave': ['informaci√≥n', 'actualidad']
        }

    async def process_telegram_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Procesa mensaje de Telegram y publica art√≠culo en WordPress
        
        CORREGIDO v2.0.4: Flujo robusto con validaciones y manejo de errores
        MEJORADO v2.0.6: Con manejo avanzado de errores SSL
        """
        try:
            # Verificar autorizaci√≥n
            user_id = update.effective_user.id
            if not self._is_authorized_user(user_id):
                await update.message.reply_text("‚ùå No tienes autorizaci√≥n para usar este bot.")
                return
            
            # Extraer contenido del mensaje
            content_data = await self._extract_content_from_message(update)
            
            if not content_data['has_content']:
                await update.message.reply_text("‚ùå Por favor env√≠a texto o imagen para procesar.")
                return
            
            # Combinar texto si existe
            combined_text = content_data['text'] if content_data['text'] else "Imagen para procesar"
            
            # Enviar mensaje de confirmaci√≥n
            status_message = await update.message.reply_text("üöÄ Procesando contenido y generando art√≠culo SEO...")
            
            # Generar art√≠culo con IA
            try:
                article_data = await self.generate_seo_article(combined_text)
                
                # NUEVA VALIDACI√ìN v2.0.4: Verificar que article_data sea v√°lido
                if not article_data or 'titulo_h1' not in article_data:
                    logger.warning("‚ö†Ô∏è Respuesta de la IA inv√°lida o incompleta. Generando fallback.")
                    article_data = self._generate_fallback_article(combined_text)
                
                await status_message.edit_text("‚úÖ Art√≠culo generado. Subiendo imagen...")
                
            except Exception as e:
                logger.error(f"‚ùå Error generando art√≠culo: {e}")
                article_data = self._generate_fallback_article(combined_text)
                await status_message.edit_text("‚ö†Ô∏è Art√≠culo generado con m√©todo de respaldo...")
            
            # Subir imagen si existe
            image_url = None
            image_id = None
            
            if content_data['image_data']:
                try:
                    filename = f"image_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                    image_url, image_id = await self.upload_image_to_wordpress(content_data['image_data'], filename)
                    
                    if image_url:
                        await status_message.edit_text("‚úÖ Imagen subida. Publicando art√≠culo...")
                    else:
                        await status_message.edit_text("‚ö†Ô∏è Error subiendo imagen. Publicando art√≠culo sin imagen...")
                        
                except Exception as e:
                    logger.error(f"‚ùå Error procesando imagen: {e}")
                    await status_message.edit_text("‚ö†Ô∏è Error con imagen. Publicando solo texto...")
            
            # Publicar art√≠culo en WordPress
            try:
                post_id, article_url = await self.publish_seo_article_to_wordpress(
                    article_data, image_url, image_id
                )
                
                if post_id:
                    # Mensaje de √©xito con detalles
                    success_msg = f"""‚úÖ **Art√≠culo publicado exitosamente**

üì∞ **T√≠tulo:** {article_data.get('titulo_h1', 'N/A')}
üÜî **Post ID:** {post_id}
üìÇ **Categor√≠a:** {article_data.get('categoria', 'N/A')}
üè∑Ô∏è **Tags:** {len(article_data.get('tags', []))} configurados
üñºÔ∏è **Imagen:** {'‚úÖ Configurada' if image_id else '‚ùå No disponible'}

üîó **URL:** {article_url}"""

                    await status_message.edit_text(success_msg)
                    logger.info(f"üéâ Proceso completado exitosamente - Post ID: {post_id}")
                    
                else:
                    await status_message.edit_text("‚ùå Error publicando art√≠culo en WordPress. Revisa los logs.")
                    logger.error("‚ùå No se pudo obtener post_id del art√≠culo publicado")
                    
            except Exception as e:
                logger.error(f"‚ùå Error cr√≠tico en publicaci√≥n: {e}")
                await status_message.edit_text("‚ùå Error cr√≠tico publicando art√≠culo. Revisa configuraci√≥n de WordPress.")
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico procesando mensaje: {e}")
            try:
                await update.message.reply_text("‚ùå Error cr√≠tico procesando tu solicitud. Contacta al administrador.")
            except:
                logger.error("‚ùå No se pudo enviar mensaje de error al usuario")

    async def run_bot(self):
        """
        Ejecuta el bot principal
        
        MEJORADO v2.0.6: Con validaciones SSL y mejor manejo de errores
        """
        try:
            # Validar configuraci√≥n
            if not self._validate_environment():
                logger.error("‚ùå Configuraci√≥n inv√°lida - no se puede iniciar el bot")
                return
            
            # Inicializar clientes
            logger.info("üöÄ Iniciando sistema de automatizaci√≥n period√≠stica v2.0.6...")
            if not await self.init_clients():
                logger.error("‚ùå Error en inicializaci√≥n - cerrando bot")
                return
            
            # Configurar manejadores
            if self.telegram_app:
                message_handler = MessageHandler(
                    filters.TEXT | filters.PHOTO, 
                    self.process_telegram_message
                )
                self.telegram_app.add_handler(message_handler)
                
                logger.info("‚úÖ Bot iniciado y esperando mensajes...")
                logger.info(f"üîê Usuarios autorizados: {len(self.authorized_user_ids)}")
                logger.info(f"üìÇ Categor√≠as disponibles: {len(self.available_categories)}")
                
                # Ejecutar bot
                await self.telegram_app.run_polling(
                    drop_pending_updates=True,
                    allowed_updates=['message']
                )
            else:
                logger.error("‚ùå No se pudo inicializar aplicaci√≥n de Telegram")
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico ejecutando bot: {e}")

def main():
    """
    Funci√≥n principal mejorada v2.0.6
    """
    try:
        logger.info("=" * 80)
        logger.info("üöÄ SISTEMA SEO PROFESIONAL v2.0.6 - INICIANDO")
        logger.info("üîí NUEVO: Manejo robusto de SSL/TLS")
        logger.info("üîÑ NUEVO: Sistema de reintentos con backoff exponencial")
        logger.info("=" * 80)
        
        # Crear y ejecutar bot
        bot = WordPressSEOBot()
        asyncio.run(bot.run_bot())
        
    except KeyboardInterrupt:
        logger.info("üëã Bot detenido por usuario")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en main: {e}")

if __name__ == "__main__":
    main()
