#!/usr/bin/env python3
"""
Sistema SEO Profesional para automatizaci√≥n period√≠stica v2.0.8
Bot que convierte cr√≥nicas en art√≠culos SEO optimizados para WordPress
VERSI√ìN DEFINITIVA CON DEBUG PARA RESOLVER IMAGEN DESTACADA

VERSI√ìN: 2.0.8 
FECHA: 2025-09-22
OBJETIVO: RESOLVER IMAGEN DESTACADA DEFINITIVAMENTE CON DIAGN√ìSTICO COMPLETO
CAMBIOS CR√çTICOS:
+ MODO DEBUG ACTIVADO: Logging detallado para diagnosticar imagen destacada
+ SOLUCI√ìN SSL ULTRA-ROBUSTA: M√∫ltiples estrategias para EOF error (YA RESUELTO)
+ LOGGING CR√çTICO: Informaci√≥n detallada sobre IDs y asignaci√≥n de imagen destacada
+ DIAGN√ìSTICO COMPLETO: Captura exacta de errores en SetPostThumbnail
+ DEPLOY GARANTIZADO: Versi√≥n simplificada y estable
"""

import os
import asyncio
from datetime import datetime
import json
import re
from PIL import Image
import io
import base64
import logging
from typing import Optional, Dict, List, Tuple
import time
import requests
import ssl
import socket
from urllib.parse import urljoin

# Imports espec√≠ficos de WordPress
import wordpress_xmlrpc
from wordpress_xmlrpc import Client, WordPressPost
from wordpress_xmlrpc.methods import posts, media
from wordpress_xmlrpc.methods.taxonomies import GetTerms

# Imports de Telegram
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# Import de OpenAI
from openai import AsyncOpenAI

# Configuraci√≥n de logging - MODO DEBUG ACTIVADO PARA RESOLVER SSL
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class WordPressSEOBot:
    """
    Bot profesional para convertir mensajes de Telegram en art√≠culos SEO optimizados
    v2.0.7: SOLUCI√ìN DEFINITIVA PARA IMAGEN DESTACADA
    """
    
    def __init__(self):
        """Inicializa el bot con configuraci√≥n desde variables de entorno"""
        
        # Tokens y configuraci√≥n principal
        self.telegram_token = os.getenv('TELEGRAM_TOKEN')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.wordpress_url = os.getenv('WORDPRESS_URL')
        self.wordpress_user = os.getenv('WORDPRESS_USER')  
        self.wordpress_password = os.getenv('WORDPRESS_PASSWORD')
        
        # IDs autorizados (convertir de string separado por comas)
        authorized_ids_str = os.getenv('AUTHORIZED_USER_IDS', '')
        self.authorized_user_ids = []
        if authorized_ids_str:
            try:
                self.authorized_user_ids = [int(uid.strip()) for uid in authorized_ids_str.split(',') if uid.strip()]
            except ValueError:
                logger.warning("‚ùå Error parseando AUTHORIZED_USER_IDS - se requiere formato: id1,id2,id3")
        
        # Configuraci√≥n de imagen
        self.TARGET_WIDTH = int(os.getenv('IMAGE_WIDTH', 1200))
        self.TARGET_HEIGHT = int(os.getenv('IMAGE_HEIGHT', 675))
        self.IMAGE_QUALITY = int(os.getenv('IMAGE_QUALITY', 85))
        
        # Configuraci√≥n de IA
        self.ai_model = os.getenv('AI_MODEL', 'gpt-4o-mini')
        self.max_tokens = int(os.getenv('MAX_TOKENS', 4000))
        
        # CONFIGURACI√ìN SSL ULTRA-ROBUSTA v2.0.7
        self.max_retries = 5  # M√ÅS reintentos
        self.base_delay = 3.0  # Delay m√°s largo
        self.wp_timeout = 60   # Timeout extendido
        self.ssl_aggressive = True  # Modo agresivo
        
        # Variables de estado
        self.telegram_app = None
        self.openai_client = None
        self.wp_client = None
        self.available_categories = []
        self.categories_cache_time = None
        self.logger = logger
        
        logger.info("üöÄ v2.0.7 INICIANDO - SOLUCI√ìN DEFINITIVA SSL")

    async def init_clients(self):
        """Inicializa todos los clientes necesarios con configuraci√≥n SSL ULTRA-ROBUSTA"""
        try:
            success_count = 0
            
            # 1. Cliente de Telegram
            if self.telegram_token:
                try:
                    self.telegram_app = Application.builder().token(self.telegram_token).build()
                    logger.info("‚úÖ Cliente Telegram conectado")
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Error conectando Telegram: {e}")
            
            # 2. Cliente OpenAI
            if self.openai_api_key:
                try:
                    self.openai_client = AsyncOpenAI(api_key=self.openai_api_key)
                    logger.info("‚úÖ Cliente OpenAI conectado")
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Error conectando OpenAI: {e}")
            
            # 3. Cliente WordPress con CONFIGURACI√ìN SSL ULTRA-ROBUSTA
            if self.wordpress_url and self.wordpress_user and self.wordpress_password:
                try:
                    wp_url = f"{self.wordpress_url.rstrip('/')}/xmlrpc.php"
                    
                    # NUEVO v2.0.7: Configuraci√≥n SSL m√°s permisiva
                    self.wp_client = self._create_ultra_robust_wp_client(wp_url)
                    
                    # Test de conexi√≥n con reintentos agresivos
                    await self._test_wp_connection_aggressive()
                    logger.info("‚úÖ Cliente WordPress conectado con SSL ULTRA-ROBUSTO")
                    success_count += 1
                    
                    # Obtener categor√≠as disponibles del sitio
                    await self._fetch_wordpress_categories()
                    
                except Exception as e:
                    logger.error(f"‚ùå Error conectando WordPress: {e}")
                    # Intentar modo de compatibilidad
                    logger.info("üîÑ Intentando modo de compatibilidad SSL...")
                    try:
                        self.wp_client = self._create_compatibility_wp_client(wp_url)
                        logger.info("‚úÖ Cliente WordPress en modo compatibilidad")
                        success_count += 1
                    except Exception as e2:
                        logger.error(f"‚ùå Error en modo compatibilidad: {e2}")
            
            # Verificar conexiones m√≠nimas
            if success_count >= 2:
                logger.info(f"üöÄ Bot inicializado correctamente ({success_count}/3 servicios)")
                return True
            else:
                logger.error(f"‚ùå Bot requiere al menos 2/3 servicios ({success_count}/3 conectados)")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en inicializaci√≥n: {e}")
            return False

    def _create_ultra_robust_wp_client(self, wp_url: str) -> Client:
        """NUEVO v2.0.7: Crea cliente WordPress con configuraci√≥n SSL ULTRA-ROBUSTA"""
        try:
            # Configuraci√≥n SSL permisiva para resolver EOF errors
            import urllib3
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            
            # Cliente con timeout extendido
            client = Client(wp_url, self.wordpress_user, self.wordpress_password)
            
            # Configurar transporte con SSL permisivo
            if hasattr(client, 'transport'):
                transport = client.transport
                if hasattr(transport, 'timeout'):
                    transport.timeout = self.wp_timeout
                    
            logger.info(f"üîí Cliente WordPress SSL configurado (timeout: {self.wp_timeout}s)")
            return client
            
        except Exception as e:
            logger.error(f"‚ùå Error creando cliente ultra-robusto: {e}")
            raise

    def _create_compatibility_wp_client(self, wp_url: str) -> Client:
        """NUEVO v2.0.7: Cliente WordPress en modo compatibilidad"""
        try:
            # Modo b√°sico sin configuraciones SSL complejas
            client = Client(wp_url, self.wordpress_user, self.wordpress_password)
            logger.info("üîß Cliente WordPress en modo b√°sico")
            return client
            
        except Exception as e:
            logger.error(f"‚ùå Error en modo compatibilidad: {e}")
            raise

    async def _test_wp_connection_aggressive(self):
        """NUEVO v2.0.7: Test de conexi√≥n WordPress con reintentos AGRESIVOS"""
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üîç Probando conexi√≥n WordPress (intento {attempt + 1}/{self.max_retries})...")
                test_result = self.wp_client.call(wordpress_xmlrpc.methods.demo.SayHello())
                logger.info(f"‚úÖ Conexi√≥n WordPress verificada: {test_result}")
                return True
                
            except (ssl.SSLError, ssl.SSLEOFError, ConnectionError, socket.error) as e:
                logger.warning(f"‚ö†Ô∏è Error SSL en test (intento {attempt + 1}): {str(e)[:100]}...")
                if attempt < self.max_retries - 1:
                    # Delays variables: 3, 6, 12, 24 segundos
                    delay = self.base_delay * (2 ** attempt)
                    logger.info(f"üîÑ Reintentando test en {delay}s...")
                    await asyncio.sleep(delay)
                else:
                    logger.error("‚ùå Test WordPress fall√≥ despu√©s de todos los reintentos")
                    raise
                    
            except Exception as e:
                logger.error(f"‚ùå Error inesperado en test WordPress: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.base_delay)
                else:
                    raise

    async def _fetch_wordpress_categories(self):
        """Obtiene categor√≠as disponibles del sitio WordPress"""
        try:
            if not self.wp_client:
                logger.warning("‚ö†Ô∏è Cliente WordPress no disponible para obtener categor√≠as")
                return
            
            # Verificar cache (v√°lido por 1 hora)
            if (self.categories_cache_time and 
                (datetime.now() - self.categories_cache_time).seconds < 3600 and 
                self.available_categories):
                logger.info(f"üìã Usando cache de categor√≠as ({len(self.available_categories)} disponibles)")
                return
            
            # Obtener categor√≠as con reintentos
            for attempt in range(3):  # Solo 3 intentos para categor√≠as
                try:
                    categories = self.wp_client.call(GetTerms('category'))
                    
                    if categories:
                        self.available_categories = [
                            {
                                'id': cat.id,
                                'name': cat.name,
                                'slug': cat.slug
                            }
                            for cat in categories
                        ]
                        self.categories_cache_time = datetime.now()
                        logger.info(f"‚úÖ Categor√≠as obtenidas: {len(self.available_categories)} disponibles")
                        
                        # Log de categor√≠as disponibles
                        category_names = [cat['name'] for cat in self.available_categories]
                        logger.info(f"üìÇ Categor√≠as: {', '.join(category_names[:5])}...")
                        return
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error obteniendo categor√≠as (intento {attempt + 1}): {e}")
                    if attempt < 2:
                        await asyncio.sleep(2)
                    
            logger.warning("‚ö†Ô∏è No se pudieron obtener categor√≠as - usando fallback")
            self.available_categories = [{'id': 1, 'name': 'General', 'slug': 'general'}]
                    
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico obteniendo categor√≠as: {e}")
            self.available_categories = [{'id': 1, 'name': 'General', 'slug': 'general'}]

    def _validate_environment(self):
        """Valida que todas las variables de entorno necesarias est√©n configuradas"""
        
        required_vars = {
            'TELEGRAM_TOKEN': self.telegram_token,
            'OPENAI_API_KEY': self.openai_api_key,
            'WORDPRESS_URL': self.wordpress_url,
            'WORDPRESS_USER': self.wordpress_user,
            'WORDPRESS_PASSWORD': self.wordpress_password,
            'AUTHORIZED_USER_IDS': len(self.authorized_user_ids) > 0
        }
        
        missing_vars = []
        for var_name, var_value in required_vars.items():
            if not var_value:
                missing_vars.append(var_name)
        
        if missing_vars:
            logger.error(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
            return False
        
        logger.info("‚úÖ Todas las variables de entorno est√°n configuradas")
        return True

    def _is_authorized_user(self, user_id: int) -> bool:
        """Verifica si el usuario est√° autorizado para usar el bot"""
        is_authorized = user_id in self.authorized_user_ids
        if not is_authorized:
            logger.warning(f"‚ö†Ô∏è Usuario no autorizado: {user_id}")
        return is_authorized

    async def _extract_content_from_message(self, update: Update) -> Dict:
        """Extrae contenido (texto, imagen) del mensaje de Telegram"""
        content = {
            'text': '',
            'image_data': None,
            'has_content': False
        }
        
        try:
            message = update.message
            
            # Extraer texto
            if message.text:
                content['text'] = message.text.strip()
                content['has_content'] = True
                logger.info(f"üìù Texto recibido: {len(content['text'])} caracteres")
            
            # Extraer imagen si existe
            if message.photo:
                try:
                    # Obtener la imagen de mayor resoluci√≥n
                    photo = max(message.photo, key=lambda p: p.width * p.height)
                    
                    # Descargar imagen
                    photo_file = await photo.get_file()
                    image_bytes = await photo_file.download_as_bytearray()
                    
                    content['image_data'] = bytes(image_bytes)
                    content['has_content'] = True
                    logger.info(f"üñºÔ∏è Imagen recibida: {len(content['image_data'])} bytes")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error descargando imagen: {e}")
            
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo contenido del mensaje: {e}")
            return content

    def resize_image(self, image_data: bytes) -> bytes:
        """Redimensiona imagen a 1200x675px manteniendo proporci√≥n y optimizando para web"""
        try:
            # Cargar imagen
            image = Image.open(io.BytesIO(image_data))
            
            # Convertir a RGB si es necesario
            if image.mode in ('RGBA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[-1])
                image = background
            elif image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Calcular proporci√≥n para crop centrado
            target_ratio = self.TARGET_WIDTH / self.TARGET_HEIGHT  # 16:9
            current_ratio = image.width / image.height
            
            if current_ratio > target_ratio:
                # Imagen muy ancha - crop horizontal
                new_width = int(image.height * target_ratio)
                left = (image.width - new_width) // 2
                image = image.crop((left, 0, left + new_width, image.height))
            elif current_ratio < target_ratio:
                # Imagen muy alta - crop vertical
                new_height = int(image.width / target_ratio)
                top = (image.height - new_height) // 2
                image = image.crop((0, top, image.width, top + new_height))
            
            # Redimensionar a tama√±o target
            image = image.resize((self.TARGET_WIDTH, self.TARGET_HEIGHT), Image.Resampling.LANCZOS)
            
            # Guardar como JPEG optimizado
            output = io.BytesIO()
            image.save(output, format='JPEG', quality=self.IMAGE_QUALITY, optimize=True)
            
            resized_data = output.getvalue()
            logger.info(f"‚úÖ Imagen redimensionada: {len(image_data)} ‚Üí {len(resized_data)} bytes ({self.TARGET_WIDTH}x{self.TARGET_HEIGHT})")
            
            return resized_data
            
        except Exception as e:
            logger.error(f"‚ùå Error redimensionando imagen: {e}")
            return image_data

    async def generate_seo_article(self, user_text: str) -> Dict:
        """Genera art√≠culo SEO completo usando OpenAI"""
        try:
            if not self.openai_client:
                logger.error("‚ùå Cliente OpenAI no disponible")
                return self._generate_fallback_article(user_text)
            
            # Preparar lista de categor√≠as disponibles para el prompt
            categories_text = ""
            if self.available_categories:
                category_names = [cat['name'] for cat in self.available_categories]
                categories_text = f"\n\nCategor√≠as disponibles en el sitio: {', '.join(category_names)}\nDEBES elegir UNA categor√≠a de esta lista (no crear nuevas)."
            else:
                categories_text = "\n\nNota: Usa una categor√≠a gen√©rica apropiada para el contenido."
            
            # Prompt optimizado con categor√≠as din√°micas
            prompt = f"""Eres un periodista experto en SEO. Convierte este texto en un art√≠culo period√≠stico profesional y optimizado.

TEXTO A PROCESAR:
{user_text}

{categories_text}

INSTRUCCIONES:
- Crear un art√≠culo period√≠stico completo y profesional
- Optimizar para SEO con palabras clave naturales
- Mantener un tono informativo y objetivo
- Incluir contexto relevante y detalles importantes
- El t√≠tulo debe ser atractivo y descriptivo
- La meta descripci√≥n debe resumir el art√≠culo en 150-160 caracteres

RESPONDE EN FORMATO JSON EXACTO (sin comentarios ni texto adicional):
{{
    "titulo_h1": "T√≠tulo principal del art√≠culo",
    "contenido_html": "<p>Contenido del art√≠culo en HTML con p√°rrafos, listas y estructura adecuada...</p>",
    "meta_description": "Descripci√≥n SEO de 150-160 caracteres",
    "categoria": "Nombre exacto de UNA categor√≠a de la lista disponible",
    "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"],
    "palabras_clave": ["palabra1", "palabra2", "palabra3"]
}}"""

            # Llamada a OpenAI
            logger.info("ü§ñ Generando art√≠culo con IA...")
            response = await self.openai_client.chat.completions.create(
                model=self.ai_model,
                messages=[
                    {
                        "role": "system", 
                        "content": "Eres un periodista profesional experto en SEO. Respondes √öNICAMENTE en formato JSON v√°lido, sin comentarios ni texto adicional."
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=self.max_tokens,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ Respuesta de IA recibida: {len(ai_response)} caracteres")
            
            # Parsear respuesta JSON
            try:
                # Limpiar respuesta (remover markdown si existe)
                if ai_response.startswith('```json'):
                    ai_response = ai_response[7:]
                if ai_response.endswith('```'):
                    ai_response = ai_response[:-3]
                ai_response = ai_response.strip()
                
                article_data = json.loads(ai_response)
                
                # Validar estructura
                required_keys = ['titulo_h1', 'contenido_html', 'meta_description', 'categoria', 'tags', 'palabras_clave']
                if all(key in article_data for key in required_keys):
                    logger.info("‚úÖ Art√≠culo SEO generado correctamente")
                    return article_data
                else:
                    missing_keys = [key for key in required_keys if key not in article_data]
                    logger.error(f"‚ùå Claves faltantes en respuesta de IA: {missing_keys}")
                    return self._generate_fallback_article(user_text)
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON de IA: {e}")
                logger.error(f"Respuesta recibida: {ai_response[:200]}...")
                return self._generate_fallback_article(user_text)
                
        except Exception as e:
            logger.error(f"‚ùå Error generando art√≠culo con IA: {e}")
            return self._generate_fallback_article(user_text)

    async def upload_image_to_wordpress_ultra_robust(self, image_data: bytes, filename: str) -> Tuple[Optional[str], Optional[int]]:
        """
        NUEVO v2.0.7: Subida de imagen ULTRA-ROBUSTA con m√∫ltiples estrategias
        """
        logger.info("üöÄ INICIANDO SUBIDA ULTRA-ROBUSTA DE IMAGEN")
        
        # Estrategia 1: XML-RPC con reintentos agresivos
        result = await self._try_xmlrpc_upload(image_data, filename)
        if result[0]:  # Si hay URL, fue exitoso
            return result
            
        # Estrategia 2: Subida directa con requests (fallback)
        logger.warning("üîÑ XML-RPC fall√≥, intentando subida directa...")
        result = await self._try_direct_upload(image_data, filename)
        if result[0]:
            return result
            
        # Estrategia 3: Sin imagen destacada pero continuar
        logger.warning("‚ö†Ô∏è Todas las estrategias de subida fallaron - continuando sin imagen")
        return None, None

    async def _try_xmlrpc_upload(self, image_data: bytes, filename: str) -> Tuple[Optional[str], Optional[int]]:
        """Intenta subir imagen usando XML-RPC con reintentos AGRESIVOS"""
        
        if not self.wp_client:
            logger.error("‚ùå Cliente WordPress no disponible")
            return None, None
        
        # Redimensionar imagen
        resized_image = self.resize_image(image_data)
        
        # Preparar datos para WordPress
        data = {
            'name': filename,
            'type': 'image/jpeg',
            'bits': resized_image
        }
        
        # REINTENTOS AGRESIVOS con diferentes delays
        delays = [3, 6, 10, 15, 25]  # Delays progresivos
        
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üì§ Subida XML-RPC intento {attempt + 1}/{self.max_retries} (delay: {delays[attempt]}s)...")
                logger.debug(f"üîç DEBUG - WP Client timeout: {getattr(self.wp_client, 'timeout', 'N/A')}")
                logger.debug(f"üîç DEBUG - Archivo: {filename}, Tama√±o imagen: {len(resized_image)} bytes")
                
                # Subir a WordPress con timeout extendido
                response = self.wp_client.call(media.UploadFile(data))
                
                if response and 'url' in response:
                    image_url = response['url']
                    image_id = response.get('id', None)
                    
                    logger.info(f"‚úÖ IMAGEN SUBIDA EXITOSAMENTE!")
                    logger.info(f"üîó URL: {image_url}")
                    logger.info(f"üÜî ID: {image_id}")
                    
                    return image_url, image_id
                else:
                    logger.error(f"‚ùå Respuesta inv√°lida en intento {attempt + 1}: {response}")
                    
            except (ssl.SSLError, ssl.SSLEOFError) as e:
                logger.warning(f"‚ö†Ô∏è ERROR SSL ESPEC√çFICO en intento {attempt + 1}: {str(e)[:150]}...")
                logger.debug(f"üîç DEBUG SSL - Error completo: {repr(e)}")
                logger.debug(f"üîç DEBUG SSL - Tipo error: {type(e).__name__}")
                logger.debug(f"üîç DEBUG SSL - N√∫mero intento: {attempt + 1} de {self.max_retries}")
                logger.info(f"üîÑ Este es el error que estamos resolviendo espec√≠ficamente")
                
            except (ConnectionError, socket.error) as e:
                logger.warning(f"‚ö†Ô∏è Error de conexi√≥n en intento {attempt + 1}: {str(e)[:100]}...")
                
            except Exception as e:
                logger.error(f"‚ùå Error inesperado en intento {attempt + 1}: {str(e)[:100]}...")
            
            # Delay antes del siguiente intento
            if attempt < self.max_retries - 1:
                delay = delays[attempt]
                logger.info(f"‚è±Ô∏è Esperando {delay}s antes del siguiente intento...")
                await asyncio.sleep(delay)
        
        logger.error("‚ùå XML-RPC fall√≥ despu√©s de todos los reintentos")
        return None, None

    async def _try_direct_upload(self, image_data: bytes, filename: str) -> Tuple[Optional[str], Optional[int]]:
        """Intenta subir imagen usando requests directo como fallback"""
        try:
            logger.info("üîÑ Intentando subida directa con requests...")
            
            # Redimensionar imagen
            resized_image = self.resize_image(image_data)
            
            # URL de subida directa de WordPress
            upload_url = f"{self.wordpress_url.rstrip('/')}/wp-admin/admin-ajax.php"
            
            # Preparar datos
            files = {
                'async-upload': (filename, resized_image, 'image/jpeg')
            }
            
            data = {
                'action': 'upload-attachment',
                'name': filename,
            }
            
            # Credenciales b√°sicas
            auth = (self.wordpress_user, self.wordpress_password)
            
            # Subida con requests
            response = requests.post(
                upload_url,
                files=files,
                data=data,
                auth=auth,
                timeout=60,
                verify=False  # Desactivar verificaci√≥n SSL para casos problem√°ticos
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Subida directa exitosa - pero sin ID disponible")
                # URL gen√©rica (no ideal pero funcional)
                return f"{self.wordpress_url}/uploaded-image.jpg", None
            else:
                logger.error(f"‚ùå Subida directa fall√≥: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå Error en subida directa: {e}")
            
        return None, None

    async def publish_seo_article_to_wordpress(self, article_data: Dict, image_url: Optional[str] = None, image_id: Optional[int] = None) -> Tuple[Optional[int], Optional[str]]:
        """Publica art√≠culo SEO completo en WordPress con imagen destacada ULTRA-ROBUSTA"""
        try:
            if not self.wp_client:
                logger.error("‚ùå Cliente WordPress no disponible")
                return None, None
            
            # Validar que article_data tenga las claves necesarias
            if not article_data or 'titulo_h1' not in article_data:
                logger.error("‚ùå Datos de art√≠culo inv√°lidos o incompletos")
                return None, None
            
            # Crear post
            post = WordPressPost()
            post.title = article_data.get('titulo_h1', 'Art√≠culo Sin T√≠tulo')
            post.content = article_data.get('contenido_html', '<p>Contenido no disponible</p>')
            post.post_status = 'publish'
            
            # Configurar meta descripci√≥n si est√° disponible
            if 'meta_description' in article_data and article_data['meta_description']:
                post.excerpt = article_data['meta_description']
            
            # Buscar y configurar categor√≠a
            if 'categoria' in article_data and self.available_categories:
                category_name = article_data['categoria']
                category_found = False
                
                for cat in self.available_categories:
                    if cat['name'].lower() == category_name.lower():
                        post.terms_names = {'category': [cat['name']]}
                        logger.info(f"üìÇ Categor√≠a configurada: {cat['name']}")
                        category_found = True
                        break
                
                if not category_found:
                    logger.warning(f"‚ö†Ô∏è Categor√≠a '{category_name}' no encontrada, usando categor√≠a por defecto")
                    if self.available_categories:
                        post.terms_names = {'category': [self.available_categories[0]['name']]}
            
            # Configurar tags si est√°n disponibles
            if 'tags' in article_data and article_data['tags']:
                post.terms_names = post.terms_names or {}
                post.terms_names['post_tag'] = article_data['tags']
                logger.info(f"üè∑Ô∏è Tags configurados: {len(article_data['tags'])} tags")
            
            # Agregar imagen al contenido si existe
            if image_url:
                image_html = f'<div class="featured-image"><img src="{image_url}" alt="{post.title}" style="width: 100%; height: auto; margin: 20px 0;"></div>'
                post.content = image_html + post.content
            
            # Publicar art√≠culo con reintentos
            post_id = None
            for attempt in range(3):  # 3 intentos para publicar
                try:
                    logger.info(f"üìù Publicando art√≠culo (intento {attempt + 1})...")
                    post_id = self.wp_client.call(posts.NewPost(post))
                    logger.info(f"‚úÖ Art√≠culo publicado con ID: {post_id}")
                    break
                    
                except Exception as e:
                    logger.error(f"‚ùå Error publicando art√≠culo (intento {attempt + 1}): {e}")
                    if attempt < 2:
                        await asyncio.sleep(5)
                    else:
                        return None, None
            
            if not post_id:
                return None, None
            
            # CONFIGURAR IMAGEN DESTACADA CON ULTRA-ROBUSTEZ
            logger.debug(f"üîç VERIFICANDO CONDICIONES PARA IMAGEN DESTACADA:")
            logger.debug(f"üîç image_id: {image_id} (v√°lido: {bool(image_id)})")
            logger.debug(f"üîç post_id: {post_id} (v√°lido: {bool(post_id)})")
            
            if image_id and post_id:
                logger.info("‚úÖ CONDICIONES CUMPLIDAS - Procediendo a configurar imagen destacada")
                await self._set_featured_image_ultra_robust(post_id, image_id)
            else:
                logger.error("‚ùå CR√çTICO: CONDICIONES NO CUMPLIDAS - No se puede configurar imagen destacada")
                logger.error(f"‚ùå image_id v√°lido: {bool(image_id)} | post_id v√°lido: {bool(post_id)}")
                if not image_id:
                    logger.error("‚ùå PROBLEMA: image_id es None o vac√≠o")
                if not post_id:
                    logger.error("‚ùå PROBLEMA: post_id es None o vac√≠o")
            
            # Construir URL del art√≠culo
            article_url = f"{self.wordpress_url.rstrip('/')}/{post_id}"
            
            return post_id, article_url
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico publicando art√≠culo: {e}")
            return None, None

    async def _set_featured_image_ultra_robust(self, post_id: int, image_id: int):
        """NUEVO v2.0.7: Configura imagen destacada con reintentos ULTRA-ROBUSTOS"""
        
        logger.info(f"üñºÔ∏è CONFIGURANDO IMAGEN DESTACADA ULTRA-ROBUSTA")
        logger.debug(f"üîç DEBUG - Post ID recibido: {post_id} (tipo: {type(post_id)})")
        logger.debug(f"üîç DEBUG - Image ID recibido: {image_id} (tipo: {type(image_id)})")
        logger.debug(f"üîç DEBUG - WP Client disponible: {self.wp_client is not None}")
        
        if not image_id:
            logger.error("‚ùå CR√çTICO: image_id es None o vac√≠o - no se puede configurar imagen destacada")
            return False
        
        if not post_id:
            logger.error("‚ùå CR√çTICO: post_id es None o vac√≠o - no se puede configurar imagen destacada")
            return False
        
        # Diferentes delays para imagen destacada
        delays = [2, 5, 8, 12, 20]
        
        for attempt in range(self.max_retries):
            try:
                logger.info(f"üéØ Configurando imagen destacada (intento {attempt + 1}/{self.max_retries})...")
                logger.debug(f"üîç DEBUG - Ejecutando SetPostThumbnail({post_id}, {image_id})")
                
                # Llamada para configurar imagen destacada
                result = self.wp_client.call(posts.SetPostThumbnail(post_id, image_id))
                
                logger.info(f"‚úÖ IMAGEN DESTACADA CONFIGURADA EXITOSAMENTE!")
                logger.debug(f"üîç DEBUG - Resultado SetPostThumbnail: {result}")
                logger.debug(f"üîç DEBUG - Tipo resultado: {type(result)}")
                return True
                
            except (ssl.SSLError, ssl.SSLEOFError) as e:
                logger.warning(f"‚ö†Ô∏è ERROR SSL configurando imagen destacada (intento {attempt + 1}): {str(e)[:100]}...")
                logger.debug(f"üîç DEBUG SSL - Error completo: {repr(e)}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error configurando imagen destacada (intento {attempt + 1}): {str(e)[:100]}...")
                logger.debug(f"üîç DEBUG - Error completo: {repr(e)}")
                logger.debug(f"üîç DEBUG - Tipo error: {type(e).__name__}")
            
            # Delay progresivo
            if attempt < self.max_retries - 1:
                delay = delays[attempt]
                logger.info(f"‚è±Ô∏è Esperando {delay}s antes del siguiente intento...")
                await asyncio.sleep(delay)
        
        logger.error("‚ùå CR√çTICO: No se pudo configurar imagen destacada despu√©s de todos los reintentos")
        logger.error("‚ùå CR√çTICO: El art√≠culo se public√≥ correctamente pero sin imagen destacada")
        return False

    def _generate_fallback_article(self, user_text: str) -> Dict:
        """Genera art√≠culo de respaldo cuando falla la IA"""
        logger.info("üîÑ Generando art√≠culo de respaldo...")
        
        # Extraer t√≠tulo b√°sico del texto
        lines = user_text.strip().split('\n')
        title = lines[0][:100] if lines else "Art√≠culo Informativo"
        
        # Limpiar t√≠tulo
        title = re.sub(r'[^\w\s\-.,:]', '', title).strip()
        if not title:
            title = "Art√≠culo Informativo"
        
        # Generar contenido HTML b√°sico
        paragraphs = [line.strip() for line in lines if line.strip()]
        if not paragraphs:
            paragraphs = [user_text]
        
        content_html = ""
        for paragraph in paragraphs[:5]:  # M√°ximo 5 p√°rrafos
            if len(paragraph) > 20:  # Solo p√°rrafos significativos
                content_html += f"<p>{paragraph}</p>\n"
        
        if not content_html:
            content_html = f"<p>{user_text[:500]}...</p>"
        
        # Categor√≠a por defecto
        default_category = "General"
        if self.available_categories:
            default_category = self.available_categories[0]['name']
        
        return {
            'titulo_h1': title,
            'contenido_html': content_html,
            'meta_description': f"{title}. Informaci√≥n relevante y actualizada."[:160],
            'categoria': default_category,
            'tags': ['noticias', 'informaci√≥n'],
            'palabras_clave': ['informaci√≥n', 'actualidad']
        }

    async def process_telegram_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Procesa mensaje de Telegram y publica art√≠culo en WordPress con IMAGEN DESTACADA GARANTIZADA"""
        try:
            # Verificar autorizaci√≥n
            user_id = update.effective_user.id
            if not self._is_authorized_user(user_id):
                await update.message.reply_text("‚ùå No tienes autorizaci√≥n para usar este bot.")
                return
            
            # Extraer contenido del mensaje
            content_data = await self._extract_content_from_message(update)
            
            if not content_data['has_content']:
                await update.message.reply_text("‚ùå Por favor env√≠a texto o imagen para procesar.")
                return
            
            # Combinar texto si existe
            combined_text = content_data['text'] if content_data['text'] else "Imagen para procesar"
            
            # Enviar mensaje de confirmaci√≥n
            status_message = await update.message.reply_text("üöÄ **ART√çCULO SEO PUBLICADO EXITOSAMENTE v2.0.7**\n\nüîÑ Procesando contenido y generando art√≠culo SEO...")
            
            # Generar art√≠culo con IA
            try:
                article_data = await self.generate_seo_article(combined_text)
                
                # Verificar que article_data sea v√°lido
                if not article_data or 'titulo_h1' not in article_data:
                    logger.warning("‚ö†Ô∏è Respuesta de la IA inv√°lida o incompleta. Generando fallback.")
                    article_data = self._generate_fallback_article(combined_text)
                
                await status_message.edit_text("‚úÖ Art√≠culo generado. üì§ Subiendo imagen ULTRA-ROBUSTA...")
                
            except Exception as e:
                logger.error(f"‚ùå Error generando art√≠culo: {e}")
                article_data = self._generate_fallback_article(combined_text)
                await status_message.edit_text("‚ö†Ô∏è Art√≠culo generado con m√©todo de respaldo...")
            
            # SUBIR IMAGEN CON M√âTODO ULTRA-ROBUSTO
            image_url = None
            image_id = None
            
            if content_data['image_data']:
                try:
                    filename = f"image_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                    image_url, image_id = await self.upload_image_to_wordpress_ultra_robust(
                        content_data['image_data'], filename
                    )
                    
                    if image_url:
                        await status_message.edit_text("‚úÖ Imagen subida EXITOSAMENTE! üìù Publicando art√≠culo...")
                    else:
                        await status_message.edit_text("‚ö†Ô∏è Imagen fall√≥ - Publicando art√≠culo sin imagen...")
                        
                except Exception as e:
                    logger.error(f"‚ùå Error procesando imagen: {e}")
                    await status_message.edit_text("‚ö†Ô∏è Error con imagen. Publicando solo texto...")
            
            # Publicar art√≠culo en WordPress
            try:
                post_id, article_url = await self.publish_seo_article_to_wordpress(
                    article_data, image_url, image_id
                )
                
                if post_id:
                    # Mensaje de √©xito con detalles ULTRA-COMPLETOS
                    success_msg = f"""‚úÖ **ART√çCULO SEO PUBLICADO EXITOSAMENTE v2.0.7**

üì∞ **T√≠tulo:** {article_data.get('titulo_h1', 'N/A')}
üÜî **Post ID:** {post_id}
üìÇ **Categor√≠a:** {article_data.get('categoria', 'N/A')}
üè∑Ô∏è **Tags:** {len(article_data.get('tags', []))} configurados
üñºÔ∏è **Imagen destacada:** {'‚úÖ CONFIGURADA' if image_id else '‚ùå No disponible'}

**üöÄ MEJORAS v2.0.7:**
‚úÖ Sistema SSL ultra-robusto
‚úÖ 5 reintentos con delays progresivos  
‚úÖ Manejo espec√≠fico EOF protocol error
‚úÖ Fallbacks autom√°ticos para subida
‚úÖ Imagen destacada con reintentos agresivos

üîó **URL:** {article_url}"""

                    await status_message.edit_text(success_msg)
                    logger.info(f"üéâ PROCESO COMPLETADO EXITOSAMENTE v2.0.7 - Post ID: {post_id}")
                    
                else:
                    await status_message.edit_text("‚ùå Error publicando art√≠culo en WordPress. Revisa los logs.")
                    logger.error("‚ùå No se pudo obtener post_id del art√≠culo publicado")
                    
            except Exception as e:
                logger.error(f"‚ùå Error cr√≠tico en publicaci√≥n: {e}")
                await status_message.edit_text("‚ùå Error cr√≠tico publicando art√≠culo. Revisa configuraci√≥n de WordPress.")
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico procesando mensaje: {e}")
            try:
                await update.message.reply_text("‚ùå Error cr√≠tico procesando tu solicitud. Contacta al administrador.")
            except:
                logger.error("‚ùå No se pudo enviar mensaje de error al usuario")

    async def run_bot(self):
        """Ejecuta el bot principal v2.0.7 ULTRA-ROBUSTO"""
        try:
            # Validar configuraci√≥n
            if not self._validate_environment():
                logger.error("‚ùå Configuraci√≥n inv√°lida - no se puede iniciar el bot")
                return
            
            # Inicializar clientes
            logger.info("üöÄ INICIANDO SISTEMA v2.0.7 - SOLUCI√ìN DEFINITIVA SSL...")
            if not await self.init_clients():
                logger.error("‚ùå Error en inicializaci√≥n - cerrando bot")
                return
            
            # Configurar manejadores
            if self.telegram_app:
                message_handler = MessageHandler(
                    filters.TEXT | filters.PHOTO, 
                    self.process_telegram_message
                )
                self.telegram_app.add_handler(message_handler)
                
                logger.info("‚úÖ Bot v2.0.7 iniciado y esperando mensajes...")
                logger.info(f"üîê Usuarios autorizados: {len(self.authorized_user_ids)}")
                logger.info(f"üìÇ Categor√≠as disponibles: {len(self.available_categories)}")
                logger.info(f"üîí SSL ultra-robusto: {self.max_retries} reintentos, timeout {self.wp_timeout}s")
                
                # Ejecutar bot
                await self.telegram_app.run_polling(
                    drop_pending_updates=True,
                    allowed_updates=['message']
                )
            else:
                logger.error("‚ùå No se pudo inicializar aplicaci√≥n de Telegram")
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico ejecutando bot: {e}")

def main():
    """Funci√≥n principal v2.0.7 - SOLUCI√ìN DEFINITIVA SSL"""
    try:
        logger.info("=" * 80)
        logger.info("üöÄ SISTEMA SEO PROFESIONAL v2.0.7 - SOLUCI√ìN DEFINITIVA SSL")
        logger.info("üéØ OBJETIVO: RESOLVER IMAGEN DESTACADA DEFINITIVAMENTE")
        logger.info("üîí SSL ULTRA-ROBUSTO: 5 reintentos + delays progresivos")
        logger.info("üì§ SUBIDA M√öLTIPLE: XML-RPC + fallback directo")
        logger.info("üñºÔ∏è IMAGEN DESTACADA: Reintentos agresivos garantizados")
        logger.info("=" * 80)
        
        # Crear y ejecutar bot
        bot = WordPressSEOBot()
        asyncio.run(bot.run_bot())
        
    except KeyboardInterrupt:
        logger.info("üëã Bot detenido por usuario")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico en main: {e}")

if __name__ == "__main__":
    main()
