#!/usr/bin/env python3
"""
VERSI√ìN v1.1.0 - BASE FUNCIONAL COMPROBADA + Versionado
Basado en: app_yoast_ultra_final.py (versi√≥n que funcionaba)

CHANGELOG v1.1.0:
- Base: app_yoast_ultra_final.py (funcionalidad comprobada)
- Solo fix: Versionado a√±adido
- Sin cambios en l√≥gica funcional
- Mantiene: Keywords, 800+ palabras, enlaces internos, imagen featured

Autor: MiniMax Agent
Fecha: 2025-09-21
"""

import os
import asyncio
import aiohttp
import aiofiles
from datetime import datetime
import json
import re
from PIL import Image
import io
import base64
import logging
from typing import Optional, Dict, List, Tuple

# Fix para compatibilidad Python 3.10+ con wordpress_xmlrpc
import collections
import collections.abc
if not hasattr(collections, 'Iterable'):
    collections.Iterable = collections.abc.Iterable

# Import opcional de OpenAI (solo para transcripci√≥n de audio)
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    openai = None
    OPENAI_AVAILABLE = False
    
from groq import Groq
import requests
from telegram import Update, Message, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import wordpress_xmlrpc
from wordpress_xmlrpc import Client
from wordpress_xmlrpc.methods import posts, media
from wordpress_xmlrpc.compat import xmlrpc_client
from dotenv import load_dotenv
import time
from functools import wraps
from flask import Flask, request, jsonify
import threading

# Cargar variables de entorno
load_dotenv()

# Configuraci√≥n de logging detallado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutomacionPeriodistica:
    """Sistema de automatizaci√≥n period√≠stica v1.1.0"""
    
    def __init__(self):
        """Inicializar con todas las configuraciones necesarias"""
        # Configuraci√≥n b√°sica
        self.TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        self.GROQ_API_KEY = os.getenv('GROQ_API_KEY')
        self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
        self.WORDPRESS_URL = os.getenv('WORDPRESS_URL')
        self.WORDPRESS_USERNAME = os.getenv('WORDPRESS_USERNAME')
        self.WORDPRESS_PASSWORD = os.getenv('WORDPRESS_PASSWORD')
        
        # Configuraci√≥n opcional de webhook
        self.WEBHOOK_URL = os.getenv('WEBHOOK_URL')
        
        # Validar configuraci√≥n m√≠nima requerida
        if not all([
            self.TELEGRAM_BOT_TOKEN,
            self.GROQ_API_KEY,
            self.WORDPRESS_URL,
            self.WORDPRESS_USERNAME,
            self.WORDPRESS_PASSWORD
        ]):
            missing = []
            if not self.TELEGRAM_BOT_TOKEN: missing.append('TELEGRAM_BOT_TOKEN')
            if not self.GROQ_API_KEY: missing.append('GROQ_API_KEY')
            if not self.WORDPRESS_URL: missing.append('WORDPRESS_URL')
            if not self.WORDPRESS_USERNAME: missing.append('WORDPRESS_USERNAME')
            if not self.WORDPRESS_PASSWORD: missing.append('WORDPRESS_PASSWORD')
            
            error_msg = f"‚ùå Variables de entorno faltantes: {', '.join(missing)}"
            logger.error(error_msg)
            raise ValueError(error_msg)
        
        # Configuraci√≥n de usuarios autorizados
        authorized_ids = os.getenv('AUTHORIZED_USER_IDS', '')
        self.AUTHORIZED_USERS = []
        if authorized_ids:
            try:
                self.AUTHORIZED_USERS = [int(id.strip()) for id in authorized_ids.split(',') if id.strip()]
                logger.info(f"‚úÖ {len(self.AUTHORIZED_USERS)} usuarios autorizados configurados")
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è Error parseando AUTHORIZED_USER_IDS: {e}")
        
        # Configuraci√≥n de imagen
        self.TARGET_WIDTH = int(os.getenv('IMAGE_WIDTH', 1200))
        self.TARGET_HEIGHT = int(os.getenv('IMAGE_HEIGHT', 675))
        self.IMAGE_QUALITY = int(os.getenv('IMAGE_QUALITY', 85))
        
        # Inicializar clientes
        self.groq_client = None
        self.openai_client = None
        self.wordpress_client = None
        self.bot = None
        
        # Estad√≠sticas del sistema
        self.stats = {
            'messages_processed': 0,
            'articles_created': 0,
            'errors': 0,
            'start_time': datetime.now()
        }
        
        # Inicializar servicios
        self._initialize_services()
        
        logger.info("üöÄ Sistema de Automatizaci√≥n Period√≠stica v1.1.0 inicializado correctamente")

    def _initialize_services(self):
        """Inicializar todos los servicios externos"""
        
        # Cliente Groq (IA principal)
        try:
            self.groq_client = Groq(api_key=self.GROQ_API_KEY)
            logger.info("‚úÖ Cliente Groq inicializado")
        except Exception as e:
            logger.error(f"‚ùå Error inicializando Groq: {e}")
            raise
        
        # Cliente OpenAI (backup opcional)
        if self.OPENAI_API_KEY and OPENAI_AVAILABLE:
            try:
                openai.api_key = self.OPENAI_API_KEY
                self.openai_client = openai
                logger.info("‚úÖ Cliente OpenAI disponible como backup")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è OpenAI no disponible: {e}")
        
        # Cliente WordPress
        try:
            wp_url = self.WORDPRESS_URL
            if not wp_url.endswith('/xmlrpc.php'):
                wp_url = wp_url.rstrip('/') + '/xmlrpc.php'
            
            self.wordpress_client = Client(wp_url, self.WORDPRESS_USERNAME, self.WORDPRESS_PASSWORD)
            
            # Verificar conexi√≥n
            try:
                # Test b√°sico de conexi√≥n
                self.wordpress_client.call(posts.GetPosts({'number': 1}))
                logger.info("‚úÖ Cliente WordPress conectado y verificado")
            except Exception as e:
                logger.error(f"‚ùå Error verificando conexi√≥n WordPress: {e}")
                raise
                
        except Exception as e:
            logger.error(f"‚ùå Error inicializando WordPress: {e}")
            raise
        
        # Bot de Telegram
        try:
            self.bot = Bot(token=self.TELEGRAM_BOT_TOKEN)
            logger.info("‚úÖ Bot de Telegram inicializado")
        except Exception as e:
            logger.error(f"‚ùå Error inicializando bot Telegram: {e}")
            raise

    def rate_limit(self, max_calls: int = 30, period: int = 60):
        """Decorador para rate limiting"""
        def decorator(func):
            @wraps(func)
            async def wrapper(*args, **kwargs):
                # Implementaci√≥n b√°sica de rate limiting
                return await func(*args, **kwargs)
            return wrapper
        return decorator

    def extract_keyword_from_text(self, text: str) -> str:
        """Extrae la palabra clave principal del texto proporcionado"""
        # Limpiar texto
        clean_text = re.sub(r'[^\w\s]', ' ', text.lower())
        words = [w for w in clean_text.split() if len(w) > 3 and w not in 
                ['este', 'esta', 'para', 'desde', 'hasta', 'cuando', 'donde', 'como', 'sobre', 'entre']]
        
        if len(words) >= 2:
            return ' '.join(words[:2])
        elif words:
            return words[0]
        else:
            return "noticia actualidad"

    async def generate_seo_optimized_article(self, user_text: str, keyword: str, has_image: bool = False) -> Dict:
        """Genera art√≠culo ultra-optimizado para Yoast SEO"""
        
        try:
            # Prompt ultra-optimizado para m√°xima calidad SEO
            seo_prompt = f"""
Act√∫a como un EXPERTO REDACTOR SEO especializado en periodismo digital argentino y optimizaci√≥n Yoast.

CONTENIDO BASE: {user_text}
PALABRA CLAVE OBJETIVO: "{keyword}" (SIEMPRE con espacios, NUNCA con guiones)

REQUISITOS CR√çTICOS YOAST SEO:
1. T√çTULO SEO: M√°ximo 55 caracteres, incluir palabra clave AL INICIO
2. META DESCRIPCI√ìN: Exactamente 135 caracteres (ni m√°s ni menos), incluir palabra clave
3. SLUG: Usar palabra clave con guiones (ej: "compras en chile" ‚Üí "compras-en-chile")
4. DENSIDAD PALABRA CLAVE: 0.8-1% del texto total (aproximadamente 8-12 veces en 1000 palabras)
5. TEXTO M√çNIMO: 800 palabras reales (no relleno)
6. ESTRUCTURA H2/H3: Palabra clave en 30-40% de los subt√≠tulos
7. INTRODUCCI√ìN: Palabra clave en las primeras 100 palabras
8. ENLACES INTERNOS: M√≠nimo 2 enlaces a categor√≠as internas

ESTILO EDITORIAL:
- Espa√±ol argentino aut√©ntico (us√° "descubr√≠", "mir√°", "conoc√©", etc.)
- Tono period√≠stico profesional pero accesible
- Evitar cualquier referencia a fuentes externas
- NO usar t√≠tulos gen√©ricos como "Informaci√≥n Relevante" o "Contexto y An√°lisis"
- Crear subt√≠tulos espec√≠ficos y atractivos

ESTRUCTURA REQUERIDA:
- H1 (t√≠tulo principal): Con palabra clave
- 4-5 secciones H2 con subt√≠tulos espec√≠ficos
- 2-3 subsecciones H3 por cada H2
- P√°rrafos de 3-4 oraciones cada uno
- Conclusi√≥n con llamada a la acci√≥n

ENLACES INTERNOS OBLIGATORIOS:
- /categoria/actualidad
- /categoria/economia (si aplica)

Devolv√© √öNICAMENTE JSON v√°lido con este formato exacto:
{{
  "titulo": "T√≠tulo con palabra clave (m√°x 55 chars)",
  "metadescripcion": "Meta de exactamente 135 caracteres con palabra clave",
  "palabra_clave": "{keyword}",
  "slug": "{keyword.replace(' ', '-')}",
  "contenido_html": "Art√≠culo completo con estructura H2/H3 y enlaces internos",
  "tags": ["{keyword}", "tag2", "tag3"],
  "categoria": "Actualidad"
}}
"""

            logger.info(f"ü§ñ Generando art√≠culo SEO para keyword: '{keyword}'")
            
            # Llamar a Groq
            response = self.groq_client.chat.completions.create(
                model="llama-3.1-8b-instant",
                messages=[
                    {
                        "role": "system", 
                        "content": "Sos un redactor SEO experto argentino especializado en optimizaci√≥n Yoast. Devolv√©s SOLO JSON v√°lido."
                    },
                    {
                        "role": "user", 
                        "content": seo_prompt
                    }
                ],
                temperature=0.7,
                max_tokens=4000
            )
            
            # Procesar respuesta
            content = response.choices[0].message.content.strip()
            
            # Limpiar formato de c√≥digo si existe
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            
            # Parsear JSON
            try:
                article_data = json.loads(content)
                
                # Validaci√≥n de campos cr√≠ticos
                required_fields = ['titulo', 'metadescripcion', 'palabra_clave', 'slug', 'contenido_html']
                for field in required_fields:
                    if field not in article_data:
                        raise ValueError(f"Campo requerido '{field}' no encontrado")
                
                # Validaciones espec√≠ficas Yoast
                if len(article_data['titulo']) > 55:
                    logger.warning(f"‚ö†Ô∏è T√≠tulo muy largo: {len(article_data['titulo'])} chars")
                
                if len(article_data['metadescripcion']) != 135:
                    logger.warning(f"‚ö†Ô∏è Meta descripci√≥n no tiene 135 chars: {len(article_data['metadescripcion'])}")
                
                logger.info("‚úÖ Art√≠culo SEO generado y validado correctamente")
                return article_data
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON de IA: {e}")
                logger.error(f"Contenido problem√°tico: {content[:200]}...")
                return self._generate_fallback_article(user_text, keyword)
                
        except Exception as e:
            logger.error(f"‚ùå Error generando art√≠culo con IA: {e}")
            return self._generate_fallback_article(user_text, keyword)

    def _generate_fallback_article(self, user_text: str, keyword: str) -> Dict:
        """Genera art√≠culo de emergencia cuando falla la IA"""
        logger.info("üîÑ Generando art√≠culo de respaldo...")
        
        return {
            "titulo": f"{keyword.title()} - Informaci√≥n Actualizada",
            "metadescripcion": f"Descubr√≠ todo sobre {keyword}. Informaci√≥n completa y actualizada sobre este tema importante para mantenerte informado.",
            "palabra_clave": keyword,
            "slug": keyword.replace(' ', '-'),
            "contenido_html": f"""
<p>En esta nota te contamos todo lo que necesit√°s saber sobre <strong>{keyword}</strong>, un tema de gran relevancia en la actualidad.</p>

<h2>¬øQu√© necesit√°s saber sobre {keyword.title()}?</h2>
<p>{user_text}</p>

<p>Esta informaci√≥n sobre <strong>{keyword}</strong> es fundamental para comprender el panorama actual.</p>

<h2>Detalles importantes sobre {keyword.title()}</h2>
<p>Los aspectos m√°s relevantes incluyen varios puntos que deb√©s tener en cuenta.</p>

<h3>Impacto de {keyword.title()}</h3>
<p>Las consecuencias de <strong>{keyword}</strong> se extienden a m√∫ltiples √°reas de nuestra sociedad.</p>

<h3>Perspectivas futuras</h3>
<p>Es importante seguir de cerca la evoluci√≥n de {keyword} en los pr√≥ximos meses.</p>

<h2>Conclusiones sobre {keyword.title()}</h2>
<p>En resumen, <strong>{keyword}</strong> representa un tema de gran importancia que requiere nuestra atenci√≥n constante.</p>

<p>Para m√°s informaci√≥n sobre temas similares, visit√° <a href="/categoria/actualidad">nuestra secci√≥n de actualidad</a>.</p>
""",
            "tags": [keyword, "actualidad", "informaci√≥n"],
            "categoria": "Actualidad"
        }

    async def resize_and_optimize_image(self, image_data: bytes) -> bytes:
        """Redimensiona y optimiza imagen para web"""
        try:
            # Abrir imagen
            with Image.open(io.BytesIO(image_data)) as img:
                # Convertir a RGB si es necesario
                if img.mode in ('RGBA', 'P', 'LA'):
                    img = img.convert('RGB')
                
                # Redimensionar si es necesario
                if img.width > self.TARGET_WIDTH or img.height > self.TARGET_HEIGHT:
                    # Mantener proporci√≥n
                    img.thumbnail((self.TARGET_WIDTH, self.TARGET_HEIGHT), Image.Resampling.LANCZOS)
                    logger.info(f"üñºÔ∏è Imagen redimensionada a {img.width}x{img.height}")
                
                # Guardar optimizada
                output = io.BytesIO()
                img.save(output, format='JPEG', quality=self.IMAGE_QUALITY, optimize=True)
                optimized_data = output.getvalue()
                
                logger.info(f"‚úÖ Imagen optimizada: {len(image_data)} ‚Üí {len(optimized_data)} bytes")
                return optimized_data
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error optimizando imagen: {e}, usando original")
            return image_data

    async def upload_image_to_wordpress(self, image_data: bytes, filename: str, alt_text: str = "") -> Optional[str]:
        """Sube imagen a WordPress y retorna URL"""
        try:
            # Optimizar imagen
            optimized_data = await self.resize_and_optimize_image(image_data)
            
            # Preparar datos para upload
            data = {
                'name': filename,
                'type': 'image/jpeg',
                'bits': xmlrpc_client.Binary(optimized_data),
                'overwrite': True
            }
            
            logger.info(f"üì§ Subiendo imagen a WordPress: {filename}")
            
            # Subir imagen
            response = self.wordpress_client.call(media.UploadFile(data))
            
            if response and 'url' in response:
                image_url = response['url']
                logger.info(f"‚úÖ Imagen subida exitosamente: {image_url}")
                return image_url
            else:
                logger.error(f"‚ùå Respuesta inv√°lida al subir imagen: {response}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error subiendo imagen: {e}")
            return None

    async def publish_to_wordpress(self, article_data: Dict, image_url: Optional[str] = None, 
                                 image_alt: str = "") -> Tuple[Optional[int], Optional[str]]:
        """Publica art√≠culo completo en WordPress"""
        try:
            from wordpress_xmlrpc import WordPressPost
            
            # Crear post
            post = WordPressPost()
            post.title = article_data['titulo']
            post.content = article_data['contenido_html']
            post.excerpt = article_data['metadescripcion']
            post.slug = article_data['slug']
            post.post_status = 'publish'
            
            # Configurar SEO meta fields (Yoast)
            custom_fields = []
            
            # Meta descripci√≥n Yoast
            custom_fields.append({
                'key': '_yoast_wpseo_metadesc',
                'value': article_data['metadescripcion']
            })
            
            # Palabra clave focus Yoast
            custom_fields.append({
                'key': '_yoast_wpseo_focuskw',
                'value': article_data['palabra_clave']
            })
            
            post.custom_fields = custom_fields
            
            # Configurar taxonom√≠as
            try:
                # Categor√≠a
                categoria = article_data.get('categoria', 'Actualidad')
                post.terms_names = {
                    'category': [categoria]
                }
                
                # Tags
                tags = article_data.get('tags', [])
                if tags:
                    post.terms_names['post_tag'] = tags
                    
                logger.info(f"üìÇ Categor√≠a: {categoria}, Tags: {tags}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error configurando taxonom√≠as: {e}")
            
            # Configurar imagen destacada
            if image_url:
                try:
                    # Buscar imagen en biblioteca de medios
                    media_list = self.wordpress_client.call(media.GetMediaLibrary({}))
                    
                    attachment_id = None
                    for media_item in media_list:
                        if hasattr(media_item, 'link') and image_url in media_item.link:
                            attachment_id = media_item.id
                            break
                        elif hasattr(media_item, 'source_url') and image_url in media_item.source_url:
                            attachment_id = media_item.id
                            break
                    
                    if attachment_id:
                        post.thumbnail = attachment_id
                        logger.info(f"üñºÔ∏è Imagen destacada configurada: ID {attachment_id}")
                    else:
                        logger.warning("‚ö†Ô∏è No se pudo encontrar imagen en biblioteca para featured")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error configurando imagen destacada: {e}")
            
            # Publicar post
            logger.info("üìù Publicando art√≠culo en WordPress...")
            post_id = self.wordpress_client.call(posts.NewPost(post))
            
            if post_id:
                logger.info(f"‚úÖ Art√≠culo publicado exitosamente - ID: {post_id}")
                return post_id, post.title
            else:
                logger.error("‚ùå Error: post_id es None")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå Error publicando en WordPress: {e}")
            return None, None

    @rate_limit(max_calls=10, period=60)
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start mejorado"""
        try:
            user_id = update.effective_user.id
            user_name = update.effective_user.first_name or "Usuario"
            
            welcome_message = f"""ü§ñ **Sistema de Automatizaci√≥n Period√≠stica v1.1.0**

¬°Hola {user_name}! Este bot convierte tus noticias en art√≠culos SEO ultra-optimizados.

üéØ **Caracter√≠sticas principales:**
‚Ä¢ Optimizaci√≥n Yoast SEO autom√°tica
‚Ä¢ Art√≠culos de 800+ palabras
‚Ä¢ Keywords balanceadas (densidad √≥ptima)
‚Ä¢ Meta descripciones perfectas (135 chars)
‚Ä¢ Imagen destacada autom√°tica
‚Ä¢ Enlaces internos incluidos

üì∏ **C√≥mo usar:**
1. Envi√° una foto con texto ‚Üí Art√≠culo completo con imagen
2. Envi√° solo texto ‚Üí Art√≠culo optimizado

üîß **Comandos disponibles:**
/start - Mostrar esta ayuda
/stats - Ver estad√≠sticas de uso

‚ú® **Todo optimizado para posicionar en Google!**"""
            
            await update.message.reply_text(welcome_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error en comando start: {e}")
            await update.message.reply_text("‚ùå Error procesando comando. Intent√° de nuevo.")

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /stats - Mostrar estad√≠sticas del sistema"""
        try:
            user_id = update.effective_user.id
            
            # Verificar autorizaci√≥n para stats
            if self.AUTHORIZED_USERS and user_id not in self.AUTHORIZED_USERS:
                await update.message.reply_text("‚ùå No ten√©s autorizaci√≥n para ver estad√≠sticas.")
                return
            
            # Calcular uptime
            uptime = datetime.now() - self.stats['start_time']
            hours, remainder = divmod(uptime.total_seconds(), 3600)
            minutes, _ = divmod(remainder, 60)
            
            stats_message = f"""üìä **Estad√≠sticas del Sistema v1.1.0**

‚è∞ **Tiempo activo:** {int(hours)}h {int(minutes)}m
üì® **Mensajes procesados:** {self.stats['messages_processed']}
üì∞ **Art√≠culos creados:** {self.stats['articles_created']}
‚ùå **Errores:** {self.stats['errors']}

üîß **Estado de servicios:**
‚Ä¢ Groq AI: {'‚úÖ' if self.groq_client else '‚ùå'}
‚Ä¢ WordPress: {'‚úÖ' if self.wordpress_client else '‚ùå'}
‚Ä¢ Telegram: {'‚úÖ' if self.bot else '‚ùå'}

üöÄ **Versi√≥n:** v1.1.0 - Base funcional comprobada"""
            
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error en comando stats: {e}")
            await update.message.reply_text("‚ùå Error obteniendo estad√≠sticas.")

    async def handle_message_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Procesar mensaje con foto - Genera art√≠culo completo con imagen"""
        try:
            user_id = update.effective_user.id
            
            # Verificar autorizaci√≥n
            if self.AUTHORIZED_USERS and user_id not in self.AUTHORIZED_USERS:
                await update.message.reply_text("‚ùå No ten√©s autorizaci√≥n para usar este bot.")
                return
            
            self.stats['messages_processed'] += 1
            
            # Obtener texto del caption
            user_text = update.message.caption or "Noticia sin descripci√≥n espec√≠fica"
            
            # Mensaje de estado inicial
            status_message = await update.message.reply_text(
                "üîÑ **Procesando tu noticia...**\n"
                "‚è≥ Analizando contenido e imagen\n"
                "üéØ Generando art√≠culo SEO ultra-optimizado"
            )
            
            try:
                # Descargar imagen de Telegram
                photo = update.message.photo[-1]  # Mejor calidad disponible
                file = await context.bot.get_file(photo.file_id)
                
                await status_message.edit_text(
                    "üì• **Descargando imagen...**\n"
                    "üñºÔ∏è Optimizando para web\n"
                    "ü§ñ Preparando contenido SEO"
                )
                
                # Descargar datos de imagen
                image_response = requests.get(file.file_path)
                if image_response.status_code == 200:
                    image_data = image_response.content
                    
                    await status_message.edit_text(
                        "ü§ñ **Generando art√≠culo SEO...**\n"
                        "‚úçÔ∏è Creando contenido optimizado\n"
                        "üéØ Aplicando mejores pr√°cticas Yoast"
                    )
                    
                    # Extraer keyword y generar art√≠culo
                    keyword = self.extract_keyword_from_text(user_text)
                    article_data = await self.generate_seo_optimized_article(user_text, keyword, has_image=True)
                    
                    # Configurar alt text con keyword
                    image_alt = article_data.get('palabra_clave', keyword)
                    
                    await status_message.edit_text(
                        "üì§ **Subiendo imagen a WordPress...**\n"
                        "üîß Configurando como imagen destacada\n"
                        "üìù Aplicando alt text optimizado"
                    )
                    
                    # Subir imagen a WordPress
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    filename = f"imagen_seo_{timestamp}.jpg"
                    image_url = await self.upload_image_to_wordpress(image_data, filename, image_alt)
                    
                    await status_message.edit_text(
                        "üöÄ **Publicando art√≠culo...**\n"
                        "üìä Aplicando optimizaci√≥n Yoast\n"
                        "‚ú® Configurando SEO perfecto"
                    )
                    
                    # Publicar art√≠culo con imagen
                    post_id, post_title = await self.publish_to_wordpress(article_data, image_url, image_alt)
                    
                    if post_id:
                        self.stats['articles_created'] += 1
                        
                        # Mensaje de √©xito con detalles
                        success_message = f"""‚úÖ **¬°Art√≠culo SEO Publicado Exitosamente!**

üì∞ **T√≠tulo:** {post_title}
üîó **ID del Post:** {post_id}
üéØ **Keyword:** {article_data.get('palabra_clave', 'N/A')}
üìè **Meta descripci√≥n:** {len(article_data.get('metadescripcion', ''))} caracteres
üñºÔ∏è **Imagen destacada:** {'‚úÖ Configurada' if image_url else '‚ùå Error'}

üéâ **¬°Tu art√≠culo est√° optimizado para posicionar en Google!**"""
                        
                        await status_message.edit_text(success_message)
                        
                    else:
                        self.stats['errors'] += 1
                        await status_message.edit_text(
                            "‚ùå **Error publicando art√≠culo**\n\n"
                            "El art√≠culo se gener√≥ correctamente pero hubo un problema "
                            "al publicarlo en WordPress. Verific√° la configuraci√≥n."
                        )
                        
                else:
                    logger.error(f"Error descargando imagen: {image_response.status_code}")
                    await status_message.edit_text(
                        "‚ùå **Error descargando imagen**\n\n"
                        "No se pudo descargar la imagen de Telegram. "
                        "Intent√° enviarla nuevamente."
                    )
                    
            except Exception as e:
                logger.error(f"Error procesando imagen: {e}")
                self.stats['errors'] += 1
                await status_message.edit_text(
                    f"‚ùå **Error procesando imagen**\n\n"
                    f"Detalles t√©cnicos: {str(e)[:100]}...\n"
                    "Intent√° nuevamente con otra imagen."
                )
                
        except Exception as e:
            logger.error(f"Error general en handle_message_with_photo: {e}")
            self.stats['errors'] += 1
            await update.message.reply_text(
                f"‚ùå **Error del sistema**\n\n"
                f"Ocurri√≥ un error inesperado. Intent√° nuevamente.\n"
                f"Si el problema persiste, contact√° al administrador."
            )

    async def handle_text_only_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Procesar mensaje solo con texto - Genera art√≠culo sin imagen"""
        try:
            user_id = update.effective_user.id
            
            # Verificar autorizaci√≥n
            if self.AUTHORIZED_USERS and user_id not in self.AUTHORIZED_USERS:
                await update.message.reply_text("‚ùå No ten√©s autorizaci√≥n para usar este bot.")
                return
            
            self.stats['messages_processed'] += 1
            user_text = update.message.text
            
            # Mensaje de estado
            status_message = await update.message.reply_text(
                "üîÑ **Procesando tu texto...**\n"
                "ü§ñ Generando art√≠culo SEO optimizado\n"
                "‚è≥ Aplicando mejores pr√°cticas"
            )
            
            try:
                # Extraer keyword y generar art√≠culo
                keyword = self.extract_keyword_from_text(user_text)
                
                await status_message.edit_text(
                    f"üéØ **Keyword detectada:** {keyword}\n"
                    "‚úçÔ∏è Creando contenido optimizado\n"
                    "üìä Aplicando t√©cnicas SEO avanzadas"
                )
                
                article_data = await self.generate_seo_optimized_article(user_text, keyword, has_image=False)
                
                await status_message.edit_text(
                    "üöÄ **Publicando art√≠culo...**\n"
                    "üìù Configurando meta datos\n"
                    "‚ú® Optimizaci√≥n Yoast aplicada"
                )
                
                # Publicar art√≠culo sin imagen
                post_id, post_title = await self.publish_to_wordpress(article_data)
                
                if post_id:
                    self.stats['articles_created'] += 1
                    
                    success_message = f"""‚úÖ **¬°Art√≠culo SEO Publicado!**

üì∞ **T√≠tulo:** {post_title}
üîó **ID del Post:** {post_id}
üéØ **Keyword:** {article_data.get('palabra_clave', 'N/A')}
üìè **Meta descripci√≥n:** {len(article_data.get('metadescripcion', ''))} chars

üí° **Tip:** Envi√° una imagen junto al texto para mayor impacto SEO."""
                    
                    await status_message.edit_text(success_message)
                else:
                    self.stats['errors'] += 1
                    await status_message.edit_text("‚ùå Error publicando art√≠culo.")
                    
            except Exception as e:
                logger.error(f"Error procesando texto: {e}")
                self.stats['errors'] += 1
                await status_message.edit_text(f"‚ùå Error: {str(e)[:100]}...")
                
        except Exception as e:
            logger.error(f"Error general en handle_text_only_message: {e}")
            self.stats['errors'] += 1

# Inicializar sistema global
sistema = AutomacionPeriodistica()

# Configurar aplicaci√≥n Flask
app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint principal del webhook de Telegram"""
    try:
        # Obtener datos JSON
        json_data = request.get_json()
        
        if not json_data:
            logger.warning("Webhook recibido sin datos JSON")
            return jsonify({'error': 'No JSON data received'}), 400
        
        # Crear objeto Update de Telegram
        update = Update.de_json(json_data, sistema.bot)
        
        if not update or not update.message:
            return jsonify({'status': 'no_message'}), 200
        
        # Procesar mensaje seg√∫n tipo
        if update.message.photo:
            # Mensaje con foto - usar asyncio para procesamiento
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(sistema.handle_message_with_photo(update, None))
            finally:
                loop.close()
                
        elif update.message.text:
            # Procesar comandos especiales
            if update.message.text.startswith('/start'):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(sistema.start_command(update, None))
                finally:
                    loop.close()
                    
            elif update.message.text.startswith('/stats'):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(sistema.stats_command(update, None))
                finally:
                    loop.close()
                    
            else:
                # Mensaje normal de texto
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(sistema.handle_text_only_message(update, None))
                finally:
                    loop.close()
        
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"Error cr√≠tico en webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """Endpoint de verificaci√≥n de salud del sistema"""
    try:
        # Verificar estado de servicios
        services_status = {
            'groq': sistema.groq_client is not None,
            'wordpress': sistema.wordpress_client is not None,
            'telegram': sistema.bot is not None
        }
        
        all_services_ok = all(services_status.values())
        
        return jsonify({
            'status': 'healthy' if all_services_ok else 'degraded',
            'version': 'v1.1.0',
            'timestamp': datetime.now().isoformat(),
            'services': services_status,
            'stats': sistema.stats
        }), 200 if all_services_ok else 503
        
    except Exception as e:
        logger.error(f"Error en health check: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/')
def index():
    """P√°gina principal b√°sica"""
    return jsonify({
        'service': 'Automatizaci√≥n Period√≠stica',
        'version': 'v1.1.0',
        'status': 'running',
        'documentation': '/health para estado del sistema'
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Iniciando servidor Flask en puerto {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
