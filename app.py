#!/usr/bin/env python3
"""
Sistema SEO Profesional para automatizaci√≥n period√≠stica v2.0.4
Bot que convierte cr√≥nicas en art√≠culos SEO optimizados para WordPress
Base s√≥lida sin errores de inicializaci√≥n + caracter√≠sticas SEO avanzadas

VERSI√ìN: 2.0.4
FECHA: 2025-09-21
CAMBIOS:
+ Obtenci√≥n autom√°tica de categor√≠as de WordPress usando XML-RPC
+ Validaci√≥n estricta de categor√≠as (prohibido crear nuevas)
+ Prompt inteligente con categor√≠as disponibles del sitio
+ Adaptabilidad multi-sitio para diferentes tem√°ticas
+ Cache de categor√≠as para optimizar rendimiento
+ Fallbacks inteligentes en caso de problemas de conexi√≥n
+ Configuraci√≥n autom√°tica de imagen destacada en WordPress
+ Optimizaci√≥n de redimensionado a 1200x675px como featured image
+ CORRECCI√ìN CR√çTICA: Flujo de generaci√≥n de art√≠culos mejorado y robusto
+ CORRECCI√ìN: Manejo consistente de errores y fallbacks
"""

import os
import asyncio
import aiohttp
import aiofiles
from datetime import datetime
import json
import re
from PIL import Image
import io
import base64
import logging
from typing import Optional, Dict, List, Tuple

# Imports espec√≠ficos de WordPress
import wordpress_xmlrpc
from wordpress_xmlrpc import Client, WordPressPost
from wordpress_xmlrpc.methods import posts, media
from wordpress_xmlrpc.methods.posts import SetPostThumbnail
from wordpress_xmlrpc.methods.taxonomies import GetTerms

# Imports de Telegram
from telegram import Update, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# Import de OpenAI
from openai import AsyncOpenAI

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class WordPressSEOBot:
    """
    Bot profesional para convertir mensajes de Telegram en art√≠culos SEO optimizados
    
    Funcionalidades principales:
    - Recibe texto/imagen/audio desde Telegram
    - Genera art√≠culos SEO completos usando IA
    - Redimensiona im√°genes a tama√±o √≥ptimo (1200x675px)
    - Configura autom√°ticamente imagen destacada en WordPress
    - Obtiene categor√≠as din√°micamente de cada sitio WordPress
    - Valida categor√≠as antes de publicar (no crea nuevas)
    - Publica directamente en WordPress con metadatos SEO
    """
    
    def __init__(self):
        """Inicializa el bot con configuraci√≥n desde variables de entorno"""
        
        # Tokens y configuraci√≥n principal
        self.telegram_token = os.getenv('TELEGRAM_TOKEN')
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        self.wordpress_url = os.getenv('WORDPRESS_URL')
        self.wordpress_user = os.getenv('WORDPRESS_USER')  
        self.wordpress_password = os.getenv('WORDPRESS_PASSWORD')
        
        # IDs autorizados (convertir de string separado por comas)
        authorized_ids_str = os.getenv('AUTHORIZED_USER_IDS', '')
        self.authorized_user_ids = []
        if authorized_ids_str:
            try:
                self.authorized_user_ids = [int(uid.strip()) for uid in authorized_ids_str.split(',') if uid.strip()]
            except ValueError:
                logger.warning("‚ùå Error parseando AUTHORIZED_USER_IDS - se requiere formato: id1,id2,id3")
        
        # Configuraci√≥n de imagen
        self.TARGET_WIDTH = int(os.getenv('IMAGE_WIDTH', 1200))
        self.TARGET_HEIGHT = int(os.getenv('IMAGE_HEIGHT', 675))
        self.IMAGE_QUALITY = int(os.getenv('IMAGE_QUALITY', 85))
        
        # Configuraci√≥n de IA
        self.ai_model = os.getenv('AI_MODEL', 'gpt-4o-mini')
        self.max_tokens = int(os.getenv('MAX_TOKENS', 4000))
        
        # Configuraci√≥n WordPress
        self.wp_timeout = int(os.getenv('WP_TIMEOUT', 30))
        
        # Configuraci√≥n de contenido SEO
        self.min_word_count = int(os.getenv('MIN_WORD_COUNT', 800))
        self.target_word_count = int(os.getenv('TARGET_WORD_COUNT', 1200))
        
        # Clientes (se inicializan despu√©s)
        self.telegram_app = None
        self.openai_client = None
        self.wp_client = None
        self.wordpress_categories = []  # Cache de categor√≠as disponibles
        
        # Estado
        self.bot_running = False
        
        logger.info("‚úÖ Bot inicializado - aguardando conexiones...")
    
    async def _initialize_clients(self) -> bool:
        """
        Inicializa conexiones con APIs externas y obtiene categor√≠as de WordPress
        NUEVO v2.0.4: Incluye cache de categor√≠as disponibles
        """
        try:
            success_count = 0
            
            # 1. Cliente de Telegram
            if self.telegram_token:
                try:
                    self.telegram_app = Application.builder().token(self.telegram_token).build()
                    logger.info("‚úÖ Cliente Telegram conectado")
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Error conectando Telegram: {e}")
            
            # 2. Cliente OpenAI
            if self.openai_api_key:
                try:
                    self.openai_client = AsyncOpenAI(api_key=self.openai_api_key)
                    logger.info("‚úÖ Cliente OpenAI conectado")
                    success_count += 1
                except Exception as e:
                    logger.error(f"‚ùå Error conectando OpenAI: {e}")
            
            # 3. Cliente WordPress
            if self.wordpress_url and self.wordpress_user and self.wordpress_password:
                try:
                    wp_url = f"{self.wordpress_url.rstrip('/')}/xmlrpc.php"
                    self.wp_client = Client(wp_url, self.wordpress_user, self.wordpress_password)
                    
                    # Probar conexi√≥n
                    test_methods = self.wp_client.call(wordpress_xmlrpc.methods.demo.SayHello())
                    logger.info("‚úÖ Cliente WordPress conectado")
                    success_count += 1
                    
                    # NUEVO v2.0.4: Obtener categor√≠as disponibles del sitio
                    await self._fetch_wordpress_categories()
                    
                except Exception as e:
                    logger.error(f"‚ùå Error conectando WordPress: {e}")
            
            # Verificar conexiones m√≠nimas
            if success_count >= 2:
                logger.info(f"üöÄ Sistema operativo - {success_count}/3 servicios conectados")
                return True
            else:
                logger.error(f"‚ùå Conexiones insuficientes: {success_count}/3")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico inicializando clientes: {e}")
            return False
    
    async def _fetch_wordpress_categories(self) -> bool:
        """
        NUEVO v2.0.4: Obtiene categor√≠as disponibles desde WordPress
        Usa XML-RPC para obtener la lista completa de categor√≠as del sitio
        """
        try:
            if not self.wp_client:
                logger.warning("‚ö†Ô∏è Cliente WordPress no disponible para obtener categor√≠as")
                return False
            
            # Obtener categor√≠as usando XML-RPC
            categories = self.wp_client.call(GetTerms('category'))
            
            # Extraer solo los nombres de las categor√≠as
            self.wordpress_categories = [cat.name for cat in categories if cat.name.lower() != 'uncategorized']
            
            logger.info(f"‚úÖ Categor√≠as obtenidas de WordPress: {len(self.wordpress_categories)} encontradas")
            logger.info(f"üìÇ Categor√≠as disponibles: {', '.join(self.wordpress_categories[:10])}{'...' if len(self.wordpress_categories) > 10 else ''}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo categor√≠as de WordPress: {e}")
            # Fallback: categor√≠as b√°sicas si no se puede conectar
            self.wordpress_categories = ["Noticias", "Actualidad", "Local", "Nacional", "Internacional"]
            logger.warning(f"‚ö†Ô∏è Usando categor√≠as de fallback: {', '.join(self.wordpress_categories)}")
            return False
    
    def _validate_category(self, suggested_category: str) -> str:
        """
        NUEVO v2.0.4: Valida que la categor√≠a sugerida por la IA existe en WordPress
        Si no existe, selecciona la m√°s apropiada de las disponibles
        """
        try:
            if not self.wordpress_categories:
                # Si no hay categor√≠as cargadas, usar fallback
                return "Noticias"
            
            # Buscar coincidencia exacta (case insensitive)
            for wp_cat in self.wordpress_categories:
                if wp_cat.lower() == suggested_category.lower():
                    logger.info(f"‚úÖ Categor√≠a validada: '{wp_cat}'")
                    return wp_cat
            
            # Si no hay coincidencia exacta, buscar coincidencia parcial
            for wp_cat in self.wordpress_categories:
                if suggested_category.lower() in wp_cat.lower() or wp_cat.lower() in suggested_category.lower():
                    logger.info(f"‚ö†Ô∏è Categor√≠a aproximada: '{suggested_category}' ‚Üí '{wp_cat}'")
                    return wp_cat
            
            # Si no hay ninguna coincidencia, usar la primera categor√≠a disponible
            fallback_category = self.wordpress_categories[0]
            logger.warning(f"‚ö†Ô∏è Categor√≠a '{suggested_category}' no encontrada. Usando: '{fallback_category}'")
            return fallback_category
            
        except Exception as e:
            logger.error(f"‚ùå Error validando categor√≠a: {e}")
            return "Noticias"  # Fallback final
    
    def resize_image(self, image_data: bytes) -> bytes:
        """Redimensiona imagen al tama√±o objetivo con calidad optimizada"""
        try:
            # Abrir imagen
            image = Image.open(io.BytesIO(image_data))
            
            # Convertir a RGB si es necesario
            if image.mode in ('RGBA', 'LA', 'P'):
                background = Image.new('RGB', image.size, (255, 255, 255))
                if image.mode == 'P':
                    image = image.convert('RGBA')
                background.paste(image, mask=image.split()[-1] if image.mode == 'RGBA' else None)
                image = background
            elif image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Redimensionar manteniendo aspecto
            image.thumbnail((self.TARGET_WIDTH, self.TARGET_HEIGHT), Image.Resampling.LANCZOS)
            
            # Crear imagen final con fondo blanco si es necesario
            final_image = Image.new('RGB', (self.TARGET_WIDTH, self.TARGET_HEIGHT), (255, 255, 255))
            
            # Centrar imagen redimensionada
            x = (self.TARGET_WIDTH - image.width) // 2
            y = (self.TARGET_HEIGHT - image.height) // 2
            final_image.paste(image, (x, y))
            
            # Guardar como JPEG optimizado
            buffer = io.BytesIO()
            final_image.save(buffer, format='JPEG', quality=self.IMAGE_QUALITY, optimize=True)
            
            logger.info(f"‚úÖ Imagen redimensionada a {self.TARGET_WIDTH}x{self.TARGET_HEIGHT}")
            return buffer.getvalue()
            
        except Exception as e:
            logger.error(f"Error redimensionando imagen: {e}")
            return image_data

    def generate_seo_prompt(self, user_text: str, has_image: bool = False) -> Dict:
        """
        CORREGIDO v2.0.4: Genera prompt para IA de manera consistente
        SIEMPRE retorna un diccionario con 'prompt' o 'error'
        """
        try:
            # Validar entrada
            if not user_text or len(user_text.strip()) < 5:
                logger.warning("‚ö†Ô∏è Texto insuficiente para generar art√≠culo")
                return {"error": "Texto insuficiente"}
            
            # Preparar lista de categor√≠as para el prompt
            categories_text = ", ".join(self.wordpress_categories) if self.wordpress_categories else "Noticias, Actualidad, Local"
            
            # Prompt profesional optimizado con categor√≠as din√°micas
            prompt = f"""Eres un periodista SEO experto. Crea un art√≠culo completo y profesional basado en esta informaci√≥n:

"{user_text}"

IMAGEN DISPONIBLE: {'S√≠' if has_image else 'No'}

CATEGOR√çAS DISPONIBLES EN WORDPRESS: {categories_text}

IMPORTANTE: Solo puedes usar UNA de las categor√≠as listadas arriba. Est√° PROHIBIDO crear nuevas categor√≠as.

REQUISITOS OBLIGATORIOS:
- M√≠nimo {self.min_word_count} palabras, objetivo {self.target_word_count} palabras
- Estructura SEO profesional con H1, H2, H3
- Meta descripci√≥n entre 140-160 caracteres
- URL slug optimizada (m√°ximo 60 caracteres)
- Keyword principal identificada
- Tags relevantes (3-5 tags)
- Enlace interno y externo sugeridos
- Datos estructurados JSON-LD
- Tone period√≠stico profesional

FORMATO DE RESPUESTA (JSON v√°lido):
{{
    "titulo_h1": "T√≠tulo principal optimizado para SEO",
    "meta_descripcion": "Descripci√≥n entre 140-160 caracteres",
    "slug_url": "url-optimizada-sin-espacios",
    "keyword_principal": "keyword principal",
    "categoria": "DEBE ser exactamente una de: {categories_text}",
    "tags": ["tag1", "tag2", "tag3"],
    "contenido_html": "<h2>Subt√≠tulo</h2><p>P√°rrafo completo...</p><h3>Otro subt√≠tulo</h3><p>M√°s contenido...</p>",
    "enlace_interno": "https://example.com/articulo-relacionado",
    "enlace_externo": "https://fuente-externa.com",
    "datos_estructurados": "JSON-LD completo para NewsArticle",
    "imagen_destacada": {{"necesaria": {"true" if has_image else "false"}, "alt_text": "descripci√≥n de imagen", "titulo_imagen": "t√≠tulo descriptivo"}}
}}

RESPONDE √öNICAMENTE CON EL JSON, SIN TEXTO ADICIONAL."""

            return {"prompt": prompt}
            
        except Exception as e:
            logger.error(f"‚ùå Error generando prompt SEO: {e}")
            return {"error": f"Error generando prompt: {str(e)}"}
    
    def _generate_fallback_article(self, user_text: str) -> Dict:
        """
        CORREGIDO v2.0.4: Genera art√≠culo b√°sico con validaci√≥n robusta
        """
        try:
            # Validar entrada
            if not user_text:
                user_text = "Art√≠culo generado autom√°ticamente"
            
            user_text = str(user_text).strip()
            if len(user_text) < 5:
                user_text = "Noticia importante generada autom√°ticamente por el sistema de publicaci√≥n."
            
            # Usar primera categor√≠a disponible como fallback
            fallback_category = self.wordpress_categories[0] if self.wordpress_categories else "Noticias"
            
            # Extraer informaci√≥n b√°sica
            title = user_text[:80].strip()
            if not title:
                title = "Art√≠culo de Noticia"
            if not title.endswith('.') and not title.endswith('?') and not title.endswith('!'):
                title += "..."
            
            # Crear slug b√°sico
            slug = re.sub(r'[^\w\s-]', '', title.lower())
            slug = re.sub(r'[-\s]+', '-', slug)[:50]
            if not slug:
                slug = "articulo-noticia"
            
            # Meta descripci√≥n b√°sica
            meta_desc = user_text[:140] if len(user_text) > 140 else user_text
            if len(meta_desc) < 50:
                meta_desc = f"Art√≠culo sobre {title[:50]}. Informaci√≥n actualizada y relevante."
            
            # Contenido HTML b√°sico estructurado
            paragraphs = user_text.split('\n')
            content_html = f"<h2>Informaci√≥n Principal</h2>\n"
            
            for paragraph in paragraphs:
                if paragraph.strip():
                    content_html += f"<p>{paragraph.strip()}</p>\n"
            
            # Si el contenido es muy corto, expandir
            if len(content_html) < 200:
                content_html += f"<h3>Detalles Adicionales</h3>\n<p>Esta noticia representa informaci√≥n importante que ser√° actualizada conforme se disponga de m√°s detalles.</p>\n"
            
            return {
                "titulo_h1": title,
                "meta_descripcion": meta_desc,
                "slug_url": slug,
                "keyword_principal": title.split()[0] if title.split() else "noticia",
                "categoria": fallback_category,
                "tags": ["noticia", "actualidad", "informaci√≥n"],
                "contenido_html": content_html,
                "enlace_interno": "",
                "enlace_externo": "",
                "datos_estructurados": "",
                "imagen_destacada": {"necesaria": "false", "alt_text": "", "titulo_imagen": ""}
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en art√≠culo fallback: {e}")
            # Fallback absoluto
            return {
                "titulo_h1": "Art√≠culo de Noticia",
                "meta_descripcion": "Informaci√≥n actualizada del sistema de noticias",
                "slug_url": "articulo-noticia-sistema",
                "keyword_principal": "noticia",
                "categoria": "Noticias",
                "tags": ["noticia", "sistema"],
                "contenido_html": f"<h2>Informaci√≥n</h2><p>{str(user_text)[:500] if user_text else 'Contenido generado autom√°ticamente'}</p>",
                "enlace_interno": "",
                "enlace_externo": "",
                "datos_estructurados": "",
                "imagen_destacada": {"necesaria": "false", "alt_text": "", "titulo_imagen": ""}
            }
    
    async def generate_article_with_ai(self, prompt_data: Dict, user_text: str) -> Dict:
        """
        CORREGIDO v2.0.4: Ejecuta la generaci√≥n del art√≠culo usando OpenAI con manejo robusto
        """
        try:
            if not self.openai_client:
                logger.warning("‚ö†Ô∏è OpenAI no disponible, usando fallback")
                return self._generate_fallback_article(user_text)
            
            if "prompt" not in prompt_data:
                logger.error("‚ùå Prompt inv√°lido recibido")
                return self._generate_fallback_article(user_text)
            
            response = await self.openai_client.chat.completions.create(
                model=self.ai_model,
                messages=[
                    {"role": "system", "content": "Eres un periodista SEO experto. Respondes √∫nicamente con JSON v√°lido."},
                    {"role": "user", "content": prompt_data["prompt"]}
                ],
                max_tokens=self.max_tokens,
                temperature=0.7
            )
            
            # Extraer contenido de respuesta
            ai_response = response.choices[0].message.content.strip()
            
            # Limpiar respuesta para asegurar JSON v√°lido
            if ai_response.startswith('```json'):
                ai_response = ai_response[7:-3]
            elif ai_response.startswith('```'):
                ai_response = ai_response[3:-3]
            
            # Parsear JSON
            try:
                article_data = json.loads(ai_response)
                
                # Validar que tenga las claves requeridas
                required_keys = ['titulo_h1', 'meta_descripcion', 'slug_url', 'categoria', 'contenido_html']
                missing_keys = [key for key in required_keys if key not in article_data]
                
                if missing_keys:
                    logger.warning(f"‚ö†Ô∏è IA gener√≥ art√≠culo incompleto, faltan: {missing_keys}")
                    return self._generate_fallback_article(user_text)
                
                logger.info("‚úÖ Art√≠culo SEO generado exitosamente con IA")
                return article_data
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON de IA: {e}")
                logger.error(f"Respuesta recibida: {ai_response[:200]}...")
                return self._generate_fallback_article(user_text)
                
        except Exception as e:
            logger.error(f"‚ùå Error generando art√≠culo con IA: {e}")
            return self._generate_fallback_article(user_text)
    
    async def upload_image_to_wordpress(self, image_data: bytes, filename: str) -> Tuple[Optional[str], Optional[int]]:
        """
        Sube imagen a WordPress y retorna URL e ID
        MODIFICADO v2.0.4: Retorna tanto URL como ID para imagen destacada
        """
        try:
            if not self.wp_client:
                return None, None
            
            # Redimensionar imagen
            resized_image = self.resize_image(image_data)
            
            # Preparar datos para WordPress
            data = {
                'name': filename,
                'type': 'image/jpeg',
                'bits': resized_image
            }
            
            # Subir a WordPress
            response = self.wp_client.call(media.UploadFile(data))
            
            if response and 'url' in response and 'id' in response:
                logger.info(f"‚úÖ Imagen subida a WordPress: {response['url']} (ID: {response['id']})")
                return response['url'], response['id']
            elif response and 'url' in response:
                # Fallback si no hay ID en respuesta
                logger.info(f"‚úÖ Imagen subida a WordPress: {response['url']} (ID no disponible)")
                return response['url'], None
            else:
                logger.error("‚ùå Respuesta inv√°lida de WordPress")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå Error subiendo imagen a WordPress: {e}")
            return None, None

    async def publish_seo_article_to_wordpress(self, article_data: Dict, image_url: Optional[str] = None, image_id: Optional[int] = None) -> Tuple[Optional[int], Optional[str]]:
        """
        CORREGIDO v2.0.4: Publica art√≠culo SEO completo en WordPress con validaciones
        """
        try:
            if not self.wp_client:
                logger.error("‚ùå Cliente WordPress no disponible")
                return None, None
            
            # Validar que article_data tenga las claves necesarias
            if not article_data or 'titulo_h1' not in article_data:
                logger.error("‚ùå Datos de art√≠culo inv√°lidos o incompletos")
                return None, None
            
            # Crear post
            post = wordpress_xmlrpc.WordPressPost()
            post.title = article_data.get('titulo_h1', 'Art√≠culo Sin T√≠tulo')
            post.slug = article_data.get('slug_url', 'articulo-sin-slug')
            
            # Contenido completo con imagen si existe
            content = ""
            if image_url:
                alt_text = article_data.get('titulo_h1', 'Imagen del art√≠culo')
                content += f'<img src="{image_url}" alt="{alt_text}" class="wp-image-featured" style="width:100%; height:auto; margin-bottom: 20px;">\n\n'
            
            content += article_data.get('contenido_html', '<p>Contenido no disponible</p>')
            
            # Agregar enlaces si no est√°n en el contenido
            if article_data.get('enlace_interno') and article_data['enlace_interno'] not in content:
                content += f'\n<p><strong>Relacionado:</strong> <a href="{article_data["enlace_interno"]}">M√°s noticias de la categor√≠a</a></p>'
            
            if article_data.get('enlace_externo') and article_data['enlace_externo'] not in content:
                content += f'\n<p><strong>Fuente:</strong> <a href="{article_data["enlace_externo"]}" target="_blank" rel="noopener">M√°s informaci√≥n</a></p>'
            
            # Agregar datos estructurados
            if article_data.get('datos_estructurados'):
                content += f'\n<script type="application/ld+json">{article_data["datos_estructurados"]}</script>'
            
            post.content = content
            post.post_status = 'publish'
            
            # Configurar meta descripci√≥n y SEO
            post.custom_fields = []
            if article_data.get('meta_descripcion'):
                post.custom_fields.append({
                    'key': '_yoast_wpseo_metadesc',
                    'value': article_data['meta_descripcion']
                })
                post.custom_fields.append({
                    'key': '_aioseop_description', 
                    'value': article_data['meta_descripcion']
                })
            
            # Keyword principal
            if article_data.get('keyword_principal'):
                post.custom_fields.append({
                    'key': '_yoast_wpseo_focuskw',
                    'value': article_data['keyword_principal']
                })
            
            # Tags y categor√≠a
            if article_data.get('tags'):
                post.terms_names = {
                    'post_tag': article_data['tags']
                }
            
            if article_data.get('categoria'):
                # NUEVO v2.0.4: Validar que la categor√≠a existe en WordPress
                validated_category = self._validate_category(article_data['categoria'])
                post.terms_names = post.terms_names or {}
                post.terms_names['category'] = [validated_category]
            
            # Publicar post
            post_id = self.wp_client.call(posts.NewPost(post))
            
            # NUEVO v2.0.4: Configurar imagen destacada si est√° disponible
            if image_id and post_id:
                try:
                    # Configurar imagen destacada usando el ID del attachment
                    self.wp_client.call(SetPostThumbnail(post_id, image_id))
                    logger.info(f"‚úÖ Imagen destacada configurada - Post ID: {post_id}, Image ID: {image_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error configurando imagen destacada: {e}")
            
            logger.info(f"‚úÖ Art√≠culo SEO publicado exitosamente - ID: {post_id}")
            return post_id, article_data.get('titulo_h1', 'Art√≠culo publicado')
            
        except Exception as e:
            logger.error(f"‚ùå Error publicando art√≠culo: {e}")
            return None, None
    
    async def send_welcome_message(self, chat_id: int):
        """Env√≠a mensaje de bienvenida con instrucciones"""
        welcome_text = f"""ü§ñ **Bot SEO Period√≠stico v2.0.4 Activado**

üì∞ **Funcionalidades:**
‚Ä¢ üìù **Solo texto** - Art√≠culo SEO de {self.min_word_count}+ palabras
‚Ä¢ üì∏ **Foto + texto** - Art√≠culo con imagen optimizada 1200x675px
‚Ä¢ üéôÔ∏è **Audio + texto** - Transcripci√≥n autom√°tica + art√≠culo SEO
‚Ä¢ üîß **Configuraci√≥n autom√°tica** - Imagen destacada en WordPress

‚öôÔ∏è **Caracter√≠sticas SEO:**
‚Ä¢ Meta descripciones optimizadas
‚Ä¢ URLs amigables
‚Ä¢ Estructura H1, H2, H3
‚Ä¢ Keywords y tags autom√°ticos
‚Ä¢ Enlaces internos y externos
‚Ä¢ Datos estructurados JSON-LD
‚Ä¢ Categor√≠as din√°micas desde WordPress

üìä **Configuraci√≥n actual:**
‚Ä¢ Palabras objetivo: {self.target_word_count}
‚Ä¢ Tama√±o imagen: {self.TARGET_WIDTH}x{self.TARGET_HEIGHT}px
‚Ä¢ Modelo IA: {self.ai_model}

üöÄ **Para empezar:**
Env√≠a tu cr√≥nica o noticia (texto, imagen, audio)"""

        try:
            bot = Bot(token=self.telegram_token)
            await bot.send_message(chat_id=chat_id, text=welcome_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error enviando mensaje de bienvenida: {e}")
    
    async def send_processing_message(self, chat_id: int) -> Optional[int]:
        """Env√≠a mensaje de procesamiento y retorna message_id para editar despu√©s"""
        processing_text = """‚è≥ **Procesando contenido...**

üîÑ **Pasos:**
‚Ä¢ Analizando contenido recibido
‚Ä¢ Generando art√≠culo SEO optimizado  
‚Ä¢ Imagen + texto descriptivo
‚Ä¢ Optimizando imagen a 1200x675px
‚Ä¢ Imagen + audio transcrito
‚Ä¢ Configurando metadatos SEO
‚Ä¢ Preparando para WordPress

[Adjuntar imagen]

üìù **Esto puede tomar 30-60 segundos**

‚úÖ Imagen redimensionada a 1200x675px
üîÑ Generando art√≠culo SEO..."""

        try:
            bot = Bot(token=self.telegram_token)
            message = await bot.send_message(chat_id=chat_id, text=processing_text, parse_mode='Markdown')
            return message.message_id
        except Exception as e:
            logger.error(f"Error enviando mensaje de procesamiento: {e}")
            return None
    
    async def update_processing_message(self, chat_id: int, message_id: int, step: str):
        """Actualiza el mensaje de procesamiento con el paso actual"""
        steps_text = {
            "analyzing": "üîç Analizando contenido recibido...",
            "generating": "ü§ñ Generando art√≠culo SEO con IA...", 
            "uploading": "üì§ Subiendo imagen a WordPress...",
            "publishing": "üìù Publicando art√≠culo en WordPress...",
            "completed": "‚úÖ ¬°Proceso completado!"
        }
        
        try:
            bot = Bot(token=self.telegram_token)
            await bot.edit_message_text(
                chat_id=chat_id, 
                message_id=message_id,
                text=f"‚è≥ **Procesando...**\n\n{steps_text.get(step, step)}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.debug(f"Error actualizando mensaje: {e}")  # Log como debug, no es cr√≠tico
    
    async def send_result_message(self, chat_id: int, success: bool, result_data: Dict):
        """Env√≠a mensaje con el resultado final del procesamiento"""
        if success:
            post_id, title = result_data.get('post_id'), result_data.get('title', 'Sin t√≠tulo')
            post_url = f"{self.wordpress_url.rstrip('/')}/wp-admin/post.php?post={post_id}&action=edit" if post_id else "No disponible"
            
            success_text = f"""‚úÖ **¬°Art√≠culo publicado exitosamente!**

üì∞ **T√≠tulo:** {title}
üÜî **ID WordPress:** {post_id}
üîó **Editar:** [Ver en WordPress]({post_url})

üìä **Detalles SEO:**
‚Ä¢ Imagen destacada: {'‚úÖ Configurada' if result_data.get('image_configured') else '‚ùå No disponible'}
‚Ä¢ Categor√≠a: {result_data.get('category', 'No especificada')}
‚Ä¢ Palabras: ~{result_data.get('word_count', 'N/A')}
‚Ä¢ Meta descripci√≥n: ‚úÖ Optimizada

üéØ **El art√≠culo est√° listo y visible en tu sitio web.**"""
            
        else:
            error_msg = result_data.get('error', 'Error desconocido')
            success_text = f"""‚ùå **Error procesando el contenido**

üîç **Detalle del error:**
{error_msg}

üí° **Sugerencias:**
‚Ä¢ Verifica que el texto tenga al menos 10 caracteres
‚Ä¢ Aseg√∫rate de que las APIs est√©n configuradas
‚Ä¢ Intenta nuevamente en unos momentos

üìû **Si el problema persiste, contacta al administrador.**"""
        
        try:
            bot = Bot(token=self.telegram_token)
            await bot.send_message(chat_id=chat_id, text=success_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error enviando resultado: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        CORREGIDO v2.0.4: Manejador principal de mensajes con flujo robusto
        """
        try:
            message = update.message
            user_id = message.from_user.id
            chat_id = message.chat_id
            
            # Verificar autorizaci√≥n
            if self.authorized_user_ids and user_id not in self.authorized_user_ids:
                await message.reply_text(
                    "‚ùå **Acceso denegado**\n\n"
                    "No tienes permisos para usar este bot.\n"
                    "Contacta al administrador para obtener acceso."
                )
                return
            
            # Verificar formato de mensaje v√°lido
            if not self._is_valid_journalist_message(message):
                await message.reply_text(
                    "üìù **Formato de mensaje inv√°lido**\n\n"
                    "**Formatos v√°lidos:**\n"
                    "‚Ä¢ Texto descriptivo (m√≠nimo 10 caracteres)\n"
                    "‚Ä¢ Imagen + texto descriptivo\n"
                    "‚Ä¢ Audio (con OpenAI configurado)\n"
                    "‚Ä¢ Imagen + audio transcrito\n"
                    "\n"
                    "**Ejemplo:**\n"
                    "[Adjuntar imagen]\n"
                    "Hoy se inaugur√≥ el nuevo centro comercial en el centro de la ciudad..."
                )
                return
                
            # Enviar mensaje de procesamiento
            processing_msg_id = await self.send_processing_message(chat_id)
            
            # Extraer contenido del mensaje
            await self.update_processing_message(chat_id, processing_msg_id, "analyzing")
            content_data = await self._extract_content_from_message(message)
            
            if not content_data:
                await self.send_result_message(chat_id, False, {'error': 'No se pudo extraer contenido del mensaje'})
                return
            
            # Combinar texto y transcripci√≥n de audio
            combined_text = f"{content_data['text_content']} {content_data['voice_transcript']}".strip()
            has_image = bool(content_data['image_data'])
            
            # CORREGIDO v2.0.4: Flujo de generaci√≥n robusto
            await self.update_processing_message(chat_id, processing_msg_id, "generating") 
            
            # Generar prompt
            prompt_data = self.generate_seo_prompt(combined_text, has_image)
            
            # Generar art√≠culo
            if 'error' in prompt_data:
                # Si hay error en el prompt, usar fallback directamente
                logger.warning(f"‚ö†Ô∏è Error en prompt: {prompt_data['error']}")
                article_data = self._generate_fallback_article(combined_text)
            else:
                # Intentar generar con IA
                article_data = await self.generate_article_with_ai(prompt_data, combined_text)
            
            # Validar que el art√≠culo est√© completo
            if not article_data or 'titulo_h1' not in article_data:
                logger.error("‚ùå Art√≠culo generado inv√°lido, usando fallback final")
                article_data = self._generate_fallback_article(combined_text)
            
            # Subir imagen si existe
            image_url, image_id = None, None
            if content_data['image_data']:
                await self.update_processing_message(chat_id, processing_msg_id, "uploading")
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"article_image_{timestamp}.jpg"
                image_url, image_id = await self.upload_image_to_wordpress(content_data['image_data'], filename)
            
            # Publicar art√≠culo
            await self.update_processing_message(chat_id, processing_msg_id, "publishing")
            post_id, post_title = await self.publish_seo_article_to_wordpress(article_data, image_url, image_id)
            
            # Actualizar a completado
            await self.update_processing_message(chat_id, processing_msg_id, "completed")
            
            # Enviar resultado
            if post_id:
                result_data = {
                    'post_id': post_id,
                    'title': post_title,
                    'category': article_data.get('categoria', 'No especificada'),
                    'word_count': len(article_data.get('contenido_html', '').split()),
                    'image_configured': bool(image_id)
                }
                await self.send_result_message(chat_id, True, result_data)
            else:
                await self.send_result_message(chat_id, False, {'error': 'Error publicando en WordPress'})
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico manejando mensaje: {e}")
            try:
                await update.message.reply_text(f"‚ùå **Error interno del sistema**\n\nDetalle: {str(e)[:100]}...\n\nIntenta nuevamente en unos momentos.")
            except:
                pass
    
    def _is_valid_journalist_message(self, message) -> bool:
        """Verifica si el mensaje tiene formato v√°lido para procesamiento period√≠stico"""
        has_image = bool(message.photo)
        has_text = bool((message.caption and len(message.caption.strip()) >= 10) or 
                       (message.text and len(message.text.strip()) >= 10))
        has_voice = bool(message.voice and self.openai_client)
        
        # Debe tener al menos texto suficiente, opcionalmente imagen o voz
        return has_text or has_voice
    
    async def _extract_content_from_message(self, message) -> Optional[Dict]:
        """Extrae y procesa el contenido del mensaje de Telegram"""
        try:
            image_data = None
            
            # Obtener imagen si existe
            if message.photo:
                photo = message.photo[-1]  # La imagen de mayor resoluci√≥n
                photo_file = await photo.get_file()
                
                # Descargar imagen usando requests (m√°s estable)
                import requests
                response = requests.get(photo_file.file_path)
                if response.status_code == 200:
                    image_data = response.content
            
            # Extraer texto
            text_content = ""
            if message.caption:
                text_content = message.caption
            elif message.text:
                text_content = message.text
            
            # Procesar audio si existe
            voice_transcript = ""
            if message.voice and self.openai_client:
                try:
                    voice_transcript = await self._transcribe_voice_message(message.voice)
                    if voice_transcript:
                        logger.info("‚úÖ Audio transcrito exitosamente")
                except Exception as e:
                    logger.warning(f"Error transcribiendo audio: {e}")
            
            return {
                'image_data': image_data,
                'text_content': text_content,
                'voice_transcript': voice_transcript,
                'user_info': {
                    'id': message.from_user.id,
                    'username': message.from_user.username or message.from_user.first_name,
                    'timestamp': datetime.now()
                }
            }
            
        except Exception as e:
            logger.error(f"Error extrayendo contenido: {e}")
            return None
    
    async def _transcribe_voice_message(self, voice_message) -> Optional[str]:
        """Transcribe audio usando Whisper de OpenAI"""
        try:
            if not self.openai_client:
                return None
            
            # Descargar archivo de voz
            voice_file = await voice_message.get_file()
            
            # Crear archivo temporal
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                import requests
                response = requests.get(voice_file.file_path)
                temp_file.write(response.content)
                temp_file_path = temp_file.name
            
            # Transcribir con Whisper
            with open(temp_file_path, 'rb') as audio_file:
                transcript = await self.openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="es"  # Espa√±ol por defecto
                )
            
            # Limpiar archivo temporal
            os.unlink(temp_file_path)
            
            return transcript.text.strip()
            
        except Exception as e:
            logger.error(f"Error transcribiendo audio: {e}")
            return None
    
    async def start_bot(self):
        """Inicia el bot de Telegram y mantiene la conexi√≥n activa"""
        try:
            # Inicializar clientes
            if not await self._initialize_clients():
                logger.error("‚ùå No se pudieron inicializar los clientes necesarios")
                return False
            
            if not self.telegram_app:
                logger.error("‚ùå Cliente de Telegram no disponible")
                return False
            
            # Configurar handlers
            self.telegram_app.add_handler(MessageHandler(
                filters.TEXT | filters.PHOTO | filters.VOICE, 
                self.handle_message
            ))
            
            # Enviar mensaje de activaci√≥n al primer usuario autorizado
            if self.authorized_user_ids:
                try:
                    await self.send_welcome_message(self.authorized_user_ids[0])
                except Exception as e:
                    logger.warning(f"No se pudo enviar mensaje de bienvenida: {e}")
            
            # Iniciar bot
            logger.info("üöÄ Iniciando bot de Telegram...")
            await self.telegram_app.initialize()
            await self.telegram_app.start()
            self.bot_running = True
            
            logger.info("‚úÖ Bot iniciado exitosamente - Esperando mensajes...")
            
            # Mantener bot corriendo
            await self.telegram_app.updater.start_polling()
            
            # Esperar hasta que se detenga
            while self.bot_running:
                await asyncio.sleep(1)
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en el bot: {e}")
            return False
        finally:
            if self.telegram_app:
                await self.telegram_app.stop()
                await self.telegram_app.shutdown()
    
    async def stop_bot(self):
        """Detiene el bot de forma segura"""
        logger.info("üî¥ Deteniendo bot...")
        self.bot_running = False

# Punto de entrada principal
async def main():
    """Funci√≥n principal del programa"""
    try:
        # Crear instancia del bot
        bot = WordPressSEOBot()
        
        # Verificar configuraci√≥n cr√≠tica
        missing_vars = []
        if not bot.telegram_token:
            missing_vars.append('TELEGRAM_TOKEN')
        if not bot.wordpress_url:
            missing_vars.append('WORDPRESS_URL')
        if not bot.wordpress_user:
            missing_vars.append('WORDPRESS_USER')
        if not bot.wordpress_password:
            missing_vars.append('WORDPRESS_PASSWORD')
        
        if missing_vars:
            logger.error(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
            logger.error("üí° Aseg√∫rate de configurar todas las variables necesarias en el archivo .env")
            return
        
        # Iniciar bot
        logger.info("üöÄ Iniciando Sistema SEO Bot v2.0.4...")
        await bot.start_bot()
        
    except KeyboardInterrupt:
        logger.info("üî¥ Detenido por el usuario")
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico: {e}")

if __name__ == "__main__":
    # Configurar asyncio para Windows si es necesario
    import sys
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # Ejecutar programa principal
    asyncio.run(main())
