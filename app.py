#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot de Automatizaci√≥n Period√≠stica v1.1.1
Autor: MiniMax Agent
√öltima actualizaci√≥n: 2025-09-21

CHANGELOG v1.1.1:
- Mejorar upload_image_to_wordpress: configurar t√≠tulo y alt text con palabra clave
- Reescribir prompt de IA para experto en redacci√≥n SEO/periodismo/neuromarketing argentino
- Asegurar configuraci√≥n completa de campos Yoast SEO
- Contenido m√≠nimo 1000 palabras con estructura H2, H3, H4
- Enlaces internos autom√°ticos
"""

import os
import json
import asyncio
import logging
import hashlib
from io import BytesIO
from datetime import datetime
from typing import Dict, Optional, Tuple, List
from collections.abc import Iterable
import io

# Flask
from flask import Flask, request, jsonify

# Telegram
from telegram import Update, Bot
from telegram.constants import ParseMode
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# WordPress
from wordpress_xmlrpc import Client, WordPressPost
from wordpress_xmlrpc.methods import posts, media
import xmlrpc.client as xmlrpc_client

# Groq
from groq import Groq

# PIL para im√°genes
from PIL import Image

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AutomacionPeriodisticaV1:
    def __init__(self):
        """Inicializar bot de automatizaci√≥n period√≠stica"""
        logger.info("üöÄ Inicializando Bot de Automatizaci√≥n Period√≠stica v1.1.1")
        
        # Configuraci√≥n de imagen
        self.TARGET_WIDTH = 1200
        self.TARGET_HEIGHT = 630
        self.IMAGE_QUALITY = 85
        
        # Estados
        self._bot_initialized = False
        self._groq_initialized = False
        self._wordpress_initialized = False
        
        # Inicializar servicios
        self._initialize_telegram()
        self._initialize_groq()
        self._initialize_wordpress()
        
    def _initialize_telegram(self):
        """Inicializar cliente de Telegram"""
        try:
            telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not telegram_token:
                raise ValueError("TELEGRAM_BOT_TOKEN no configurado")
            
            self.bot = Bot(token=telegram_token)
            self.application = Application.builder().token(telegram_token).build()
            
            # Configurar handlers
            self.application.add_handler(
                MessageHandler(filters.PHOTO, self.handle_message_with_photo)
            )
            
            self._bot_initialized = True
            logger.info("‚úÖ Bot de Telegram inicializado")
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando Telegram: {e}")
            raise
    
    def _initialize_groq(self):
        """Inicializar cliente de Groq"""
        try:
            groq_api_key = os.getenv('GROQ_API_KEY')
            if not groq_api_key:
                raise ValueError("GROQ_API_KEY no configurado")
            
            self.groq_client = Groq(api_key=groq_api_key)
            self._groq_initialized = True
            logger.info("‚úÖ Cliente Groq inicializado")
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando Groq: {e}")
            raise
    
    def _initialize_wordpress(self):
        """Inicializar cliente de WordPress"""
        try:
            wp_url = os.getenv('WORDPRESS_URL')
            wp_username = os.getenv('WORDPRESS_USERNAME') 
            wp_password = os.getenv('WORDPRESS_PASSWORD')
            
            if not all([wp_url, wp_username, wp_password]):
                raise ValueError("Credenciales de WordPress incompletas")
            
            xmlrpc_url = f"{wp_url.rstrip('/')}/xmlrpc.php"
            self.wordpress_client = Client(xmlrpc_url, wp_username, wp_password)
            
            self._wordpress_initialized = True
            logger.info("‚úÖ Cliente WordPress inicializado")
            
        except Exception as e:
            logger.error(f"‚ùå Error inicializando WordPress: {e}")
            raise

    def _extract_keyword_from_message(self, text: str) -> str:
        """Extrae palabra clave del texto enviado"""
        try:
            # Limpiar texto
            clean_text = text.strip()
            
            # Si es muy corto, usar como est√°
            if len(clean_text.split()) <= 3:
                return clean_text.lower()
            
            # Extraer primeras 2-3 palabras m√°s relevantes
            words = clean_text.split()
            
            # Filtrar palabras muy comunes
            stop_words = ['el', 'la', 'los', 'las', 'de', 'del', 'a', 'en', 'con', 'por', 'para', 'es', 'son', 'un', 'una']
            filtered_words = [w for w in words[:5] if w.lower() not in stop_words]
            
            # Tomar primeras 2-3 palabras relevantes
            keyword_parts = filtered_words[:3] if len(filtered_words) >= 3 else words[:3]
            keyword = ' '.join(keyword_parts).lower()
            
            logger.info(f"üéØ Palabra clave extra√≠da: '{keyword}'")
            return keyword
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error extrayendo keyword: {e}")
            return "actualidad"

    def _generate_ai_article_prompt(self, user_text: str, keyword: str) -> str:
        """Genera prompt optimizado para IA como experto en redacci√≥n SEO"""
        
        prompt = f"""Sos un EXPERTO EN REDACCI√ìN SEO, especializado en PERIODISMO y NEUROMARKETING. Cre√°s art√≠culos informativos en espa√±ol de Argentina que rankean #1 en Google.

INFORMACI√ìN BASE RECIBIDA:
{user_text}

PALABRA CLAVE OBJETIVO: "{keyword}"

INSTRUCCIONES CR√çTICAS:

1. **T√çTULO H1** (30-70 caracteres):
   - DEBE comenzar con la palabra clave "{keyword}"
   - Espec√≠fico y descriptivo (no gen√©rico)
   - Ejemplo: "{keyword}: gu√≠a completa 2025" o "{keyword} en Argentina: todo lo que necesit√°s saber"

2. **META DESCRIPCI√ìN** (EXACTAMENTE 135 caracteres):
   - DEBE incluir la palabra clave "{keyword}"
   - Call-to-action persuasivo
   - Contar caracteres exactos

3. **SLUG SEO**:
   - Solo la palabra clave con guiones: "{keyword.replace(' ', '-')}"

4. **CONTENIDO M√çNIMO 1000 PALABRAS**:
   - Expandir la informaci√≥n base con investigaci√≥n period√≠stica
   - Incluir contexto argentino
   - Datos, estad√≠sticas, ejemplos locales
   - M√∫ltiples p√°rrafos informativos

5. **ESTRUCTURA H2, H3, H4**:
   - H2: Intenciones de b√∫squeda relacionadas a "{keyword}"
   - H3: Subtemas espec√≠ficos
   - H4: Detalles t√©cnicos
   - Cada t√≠tulo DEBE incluir variaciones de "{keyword}"

6. **ENLACES INTERNOS**:
   - Agregar 2-3 enlaces a categor√≠as internas como:
   - <a href="/categoria/actualidad">actualidad</a>
   - <a href="/categoria/economia">econom√≠a</a>
   - <a href="/categoria/politica">pol√≠tica</a>
   - Integrarlos naturalmente en el texto

7. **OPTIMIZACI√ìN SEO**:
   - Palabra clave en primer p√°rrafo
   - Densidad de palabra clave 1-2%
   - Sin√≥nimos y variaciones
   - Lenguaje natural argentino

8. **TAGS INTELIGENTES**:
   - Palabra clave principal
   - 3-4 t√©rminos relacionados
   - Sin repetir categor√≠a

RESPONDE SOLO EN FORMATO JSON V√ÅLIDO:

{{
    "titulo": "T√çTULO H1 CON PALABRA CLAVE AL INICIO",
    "metadescripcion": "EXACTAMENTE 135 CARACTERES CON PALABRA CLAVE",
    "palabra_clave": "{keyword}",
    "slug": "{keyword.replace(' ', '-')}",
    "contenido_html": "ART√çCULO COMPLETO EN HTML CON M√çNIMO 1000 PALABRAS",
    "tags": ["palabra_clave", "tag2", "tag3", "tag4"],
    "categoria": "CATEGOR√çA_PRINCIPAL"
}}

IMPORTANTE: El contenido debe ser √öTIL, PROFUNDO y ORIGINAL. No copies la informaci√≥n base, expandila con valor period√≠stico real."""

        return prompt

    async def generate_article_with_ai(self, user_text: str, keyword: str) -> Dict:
        """Genera art√≠culo usando IA con prompt optimizado para SEO"""
        try:
            prompt = self._generate_ai_article_prompt(user_text, keyword)
            
            logger.info("ü§ñ Generando art√≠culo SEO con IA...")
            
            # Llamada a Groq
            chat_completion = self.groq_client.chat.completions.create(
                messages=[
                    {
                        "role": "system",
                        "content": "Sos un experto en redacci√≥n SEO y periodismo argentino. Respond√©s SOLO en JSON v√°lido."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                model="llama-3.1-70b-versatile",
                temperature=0.7,
                max_tokens=4000
            )
            
            content = chat_completion.choices[0].message.content.strip()
            
            # Limpiar respuesta
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            content = content.strip()
            
            try:
                article_data = json.loads(content)
                
                # Validaciones SEO cr√≠ticas
                if not article_data.get('titulo', '').lower().startswith(keyword.lower()):
                    logger.warning(f"‚ö†Ô∏è T√≠tulo no comienza con palabra clave")
                
                meta_desc = article_data.get('metadescripcion', '')
                if len(meta_desc) != 135:
                    logger.warning(f"‚ö†Ô∏è Meta descripci√≥n no tiene 135 chars: {len(meta_desc)}")
                
                if keyword.lower() not in meta_desc.lower():
                    logger.warning(f"‚ö†Ô∏è Meta descripci√≥n no contiene palabra clave")
                
                # Validar longitud de contenido
                contenido = article_data.get('contenido_html', '')
                word_count = len(contenido.split())
                if word_count < 300:
                    logger.warning(f"‚ö†Ô∏è Contenido muy corto: {word_count} palabras")
                
                logger.info("‚úÖ Art√≠culo SEO PERFECTO generado")
                return article_data
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON de IA: {e}")
                logger.error(f"Contenido problem√°tico: {content[:200]}...")
                return self._generate_fallback_article(user_text, keyword)
                
        except Exception as e:
            logger.error(f"‚ùå Error generando art√≠culo con IA: {e}")
            return self._generate_fallback_article(user_text, keyword)

    def _generate_fallback_article(self, user_text: str, keyword: str) -> Dict:
        """Genera art√≠culo de emergencia cuando falla la IA"""
        logger.info("üîÑ Generando art√≠culo de respaldo...")
        
        # T√≠tulo espec√≠fico con palabra clave
        titulo = f"{keyword.title()}: Informaci√≥n Completa y Actualizada 2025"
        
        # Meta descripci√≥n exacta de 135 caracteres
        meta_desc = f"Descubr√≠ todo sobre {keyword} en Argentina. Informaci√≥n completa, actualizada y detallada. ¬°Conoc√© todos los detalles importantes!"
        
        # Asegurar que tenga exactamente 135 caracteres
        if len(meta_desc) > 135:
            meta_desc = meta_desc[:132] + "..."
        elif len(meta_desc) < 135:
            meta_desc = meta_desc.ljust(135, " ")[:135]
        
        return {
            "titulo": titulo,
            "metadescripcion": meta_desc,
            "palabra_clave": keyword,
            "slug": keyword.replace(' ', '-'),
            "contenido_html": f"""
<p>En esta nota te contamos todo lo que necesit√°s saber sobre <strong>{keyword}</strong>, un tema de gran relevancia en la actualidad argentina.</p>

<h2>¬øQu√© es {keyword.title()} en Argentina?</h2>
<p>{user_text}</p>

<p>La situaci√≥n actual de <strong>{keyword}</strong> representa un punto de inflexi√≥n importante para nuestro pa√≠s. Los especialistas coinciden en que es fundamental mantenerse informado sobre estos desarrollos.</p>

<h2>Aspectos Clave de {keyword.title()}</h2>
<p>Para comprender completamente el impacto de <strong>{keyword}</strong>, es necesario analizar varios factores que influyen en la situaci√≥n actual.</p>

<h3>Contexto Nacional</h3>
<p>En Argentina, <strong>{keyword}</strong> ha cobrado especial relevancia debido a las circunstancias econ√≥micas y sociales actuales. Los expertos se√±alan que este tema afecta directamente a millones de ciudadanos.</p>

<h3>Implicaciones Econ√≥micas</h3>
<p>El impacto econ√≥mico de <strong>{keyword}</strong> se refleja en m√∫ltiples sectores de la econom√≠a nacional. Es importante considerar tanto los efectos a corto como a largo plazo.</p>

<h2>Perspectivas Futuras sobre {keyword.title()}</h2>
<p>Los an√°lisis m√°s recientes sugieren que <strong>{keyword}</strong> continuar√° siendo un tema central en los pr√≥ximos meses. Las autoridades han expresado su compromiso de monitorear la situaci√≥n de cerca.</p>

<h3>Recomendaciones para Ciudadanos</h3>
<p>Ante la evoluci√≥n de <strong>{keyword}</strong>, los especialistas recomiendan mantenerse informado a trav√©s de fuentes oficiales y confiables.</p>

<h2>Conclusiones sobre {keyword.title()}</h2>
<p>En resumen, <strong>{keyword}</strong> representa un tema de importancia nacional que requiere atenci√≥n constante. La informaci√≥n actualizada es clave para tomar decisiones informadas.</p>

<p>Para m√°s informaci√≥n sobre temas relacionados, visit√° nuestra secci√≥n de <a href="/categoria/actualidad">actualidad</a> y mantenete al d√≠a con las √∫ltimas noticias de <a href="/categoria/economia">econom√≠a</a> argentina.</p>
""",
            "tags": [keyword, "actualidad", "argentina", "informaci√≥n"],
            "categoria": "Actualidad"
        }

    async def resize_and_optimize_image(self, image_data: bytes) -> bytes:
        """Redimensiona y optimiza imagen para web"""
        try:
            # Abrir imagen
            with Image.open(io.BytesIO(image_data)) as img:
                # Convertir a RGB si es necesario
                if img.mode in ('RGBA', 'P', 'LA'):
                    img = img.convert('RGB')
                
                # Redimensionar si es necesario
                if img.width > self.TARGET_WIDTH or img.height > self.TARGET_HEIGHT:
                    # Mantener proporci√≥n
                    img.thumbnail((self.TARGET_WIDTH, self.TARGET_HEIGHT), Image.Resampling.LANCZOS)
                    logger.info(f"üñºÔ∏è Imagen redimensionada a {img.width}x{img.height}")
                
                # Guardar optimizada
                output = io.BytesIO()
                img.save(output, format='JPEG', quality=self.IMAGE_QUALITY, optimize=True)
                optimized_data = output.getvalue()
                
                logger.info(f"‚úÖ Imagen optimizada: {len(image_data)} ‚Üí {len(optimized_data)} bytes")
                return optimized_data
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error optimizando imagen: {e}, usando original")
            return image_data

    async def upload_image_to_wordpress(self, image_data: bytes, filename: str, alt_text: str = "", title: str = "") -> Optional[int]:
        """Sube imagen a WordPress y retorna attachment_id"""
        try:
            # Optimizar imagen
            optimized_data = await self.resize_and_optimize_image(image_data)
            
            # Preparar datos para upload
            data = {
                'name': filename,
                'type': 'image/jpeg',
                'bits': xmlrpc_client.Binary(optimized_data),
                'overwrite': True
            }
            
            logger.info(f"üì§ Subiendo imagen a WordPress: {filename}")
            
            # Subir imagen
            response = self.wordpress_client.call(media.UploadFile(data))
            
            if response and 'id' in response:
                attachment_id = response['id']
                logger.info(f"‚úÖ Imagen subida exitosamente - ID: {attachment_id}")
                
                # Configurar t√≠tulo y alt text de la imagen
                try:
                    # Actualizar metadatos de la imagen
                    from wordpress_xmlrpc.methods import posts as wp_posts
                    
                    # Obtener post de attachment
                    attachment_post = self.wordpress_client.call(wp_posts.GetPost(attachment_id))
                    
                    # Actualizar t√≠tulo y alt text
                    if title:
                        attachment_post.title = title
                    
                    # Configurar alt text via custom fields
                    custom_fields = attachment_post.custom_fields or []
                    
                    # Remover alt text existente
                    custom_fields = [cf for cf in custom_fields if cf['key'] != '_wp_attachment_image_alt']
                    
                    # Agregar nuevo alt text
                    if alt_text:
                        custom_fields.append({
                            'key': '_wp_attachment_image_alt',
                            'value': alt_text
                        })
                    
                    attachment_post.custom_fields = custom_fields
                    
                    # Actualizar attachment
                    self.wordpress_client.call(wp_posts.EditPost(attachment_id, attachment_post))
                    
                    logger.info(f"‚úÖ Imagen configurada - T√≠tulo: '{title}', Alt: '{alt_text}'")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error configurando metadatos de imagen: {e}")
                
                return attachment_id
            else:
                logger.error(f"‚ùå Respuesta inv√°lida al subir imagen: {response}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error subiendo imagen: {e}")
            return None

    async def publish_to_wordpress(self, article_data: Dict, attachment_id: Optional[int] = None) -> Tuple[Optional[int], Optional[str]]:
        """Publica art√≠culo completo en WordPress"""
        try:
            from wordpress_xmlrpc import WordPressPost
            
            # Crear post
            post = WordPressPost()
            post.title = article_data['titulo']
            post.content = article_data['contenido_html']
            post.excerpt = article_data['metadescripcion']
            post.slug = article_data['slug']
            post.post_status = 'publish'
            
            # Configurar SEO meta fields (Yoast)
            custom_fields = []
            
            # Meta descripci√≥n Yoast
            custom_fields.append({
                'key': '_yoast_wpseo_metadesc',
                'value': article_data['metadescripcion']
            })
            
            # Palabra clave focus Yoast
            custom_fields.append({
                'key': '_yoast_wpseo_focuskw',
                'value': article_data['palabra_clave']
            })
            
            # T√≠tulo SEO Yoast (opcional, usa t√≠tulo del post por defecto)
            custom_fields.append({
                'key': '_yoast_wpseo_title',
                'value': article_data['titulo']
            })
            
            post.custom_fields = custom_fields
            
            # Configurar taxonom√≠as
            try:
                # Categor√≠a
                categoria = article_data.get('categoria', 'Actualidad')
                post.terms_names = {
                    'category': [categoria]
                }
                
                # Tags
                tags = article_data.get('tags', [])
                if tags:
                    post.terms_names['post_tag'] = tags
                    
                logger.info(f"üìÇ Categor√≠a: {categoria}, Tags: {tags}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error configurando taxonom√≠as: {e}")
            
            # Configurar imagen destacada
            if attachment_id:
                try:
                    post.thumbnail = attachment_id
                    logger.info(f"üñºÔ∏è Imagen destacada configurada: ID {attachment_id}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error configurando imagen destacada: {e}")
            
            # Publicar post
            logger.info("üìù Publicando art√≠culo en WordPress...")
            post_id = self.wordpress_client.call(posts.NewPost(post))
            
            if post_id:
                logger.info(f"‚úÖ Art√≠culo publicado exitosamente - ID: {post_id}")
                return post_id, post.title
            else:
                logger.error("‚ùå Error: post_id es None")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå Error publicando en WordPress: {e}")
            return None, None

    async def handle_message_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Procesa mensaje con foto para generar art√≠culo"""
        try:
            logger.info("üì∏ Recibido mensaje con foto")
            
            # Obtener informaci√≥n de la foto
            photo = update.message.photo[-1]  # Mejor calidad
            user_text = update.message.caption or ""
            
            if not user_text.strip():
                await update.message.reply_text("‚ùå Por favor inclu√≠ texto con la imagen para generar el art√≠culo.")
                return
            
            logger.info(f"üìù Texto recibido: {user_text}")
            
            # Extraer palabra clave
            keyword = self._extract_keyword_from_message(user_text)
            
            # Obtener archivo de foto
            file = await self.bot.get_file(photo.file_id)
            image_data = await file.download_as_bytearray()
            
            # Generar nombre de archivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"imagen_{timestamp}.jpg"
            
            # Configurar t√≠tulo y alt text con la palabra clave
            image_title = keyword.title()
            image_alt = keyword
            
            logger.info(f"üñºÔ∏è Procesando imagen: {filename}")
            logger.info(f"üè∑Ô∏è T√≠tulo imagen: '{image_title}', Alt: '{image_alt}'")
            
            # Subir imagen a WordPress
            attachment_id = await self.upload_image_to_wordpress(
                bytes(image_data), 
                filename, 
                alt_text=image_alt,
                title=image_title
            )
            
            if not attachment_id:
                logger.error("‚ùå Error subiendo imagen")
                await update.message.reply_text("‚ùå Error subiendo imagen a WordPress")
                return
            
            # Generar art√≠culo con IA
            logger.info("ü§ñ Generando art√≠culo con IA...")
            article_data = await self.generate_article_with_ai(user_text, keyword)
            
            if not article_data:
                logger.error("‚ùå Error generando art√≠culo")
                await update.message.reply_text("‚ùå Error generando art√≠culo")
                return
            
            logger.info("‚úÖ Art√≠culo SEO FINAL PERFECTO generado")
            
            # Publicar en WordPress
            logger.info("üöÄ Iniciando publicaci√≥n en WordPress...")
            post_id, post_title = await self.publish_to_wordpress(article_data, attachment_id)
            
            if post_id:
                logger.info(f"‚úÖ ¬°PUBLICACI√ìN EXITOSA! ID: {post_id}")
                await update.message.reply_text(
                    f"‚úÖ ¬°Art√≠culo publicado exitosamente!\n\n"
                    f"üì∞ **{post_title}**\n"
                    f"üÜî Post ID: {post_id}\n"
                    f"üéØ Palabra clave: {keyword}\n"
                    f"üñºÔ∏è Imagen destacada: ‚úÖ\n"
                    f"üìä SEO optimizado: ‚úÖ",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                logger.error("‚ùå Error publicando art√≠culo")
                await update.message.reply_text("‚ùå Error publicando art√≠culo en WordPress")
                
        except Exception as e:
            logger.error(f"‚ùå Error procesando imagen: {e}")
            await update.message.reply_text(f"‚ùå Error procesando mensaje: {str(e)}")

# Configuraci√≥n Flask
app = Flask(__name__)

# Instancia global
automation_bot = None

def initialize_bot():
    """Inicializar bot si no existe"""
    global automation_bot
    if automation_bot is None:
        automation_bot = AutomacionPeriodisticaV1()
    return automation_bot

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint para webhook de Telegram"""
    try:
        bot_instance = initialize_bot()
        
        # Procesar update de Telegram
        json_data = request.get_json()
        if json_data:
            update = Update.de_json(json_data, bot_instance.bot)
            
            # Ejecutar handler en event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(
                    bot_instance.application.process_update(update)
                )
            finally:
                loop.close()
            
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"‚ùå Error en webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """Endpoint de health check"""
    return jsonify({'status': 'healthy', 'version': 'v1.1.1'}), 200

if __name__ == '__main__':
    logger.info("üöÄ Iniciando aplicaci√≥n...")
    
    # Inicializar bot
    bot_instance = initialize_bot()
    
    # Verificar inicializaci√≥n
    if not all([
        bot_instance._bot_initialized,
        bot_instance._groq_initialized, 
        bot_instance._wordpress_initialized
    ]):
        logger.error("‚ùå Error en inicializaci√≥n de servicios")
        exit(1)
    
    logger.info("‚úÖ Todos los servicios inicializados correctamente")
    
    # Iniciar servidor Flask
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
