#!/usr/bin/env python3
"""
Sistema mejorado para automatizaci√≥n period√≠stica v2.1.1
üöÄ VERSI√ìN DEFINITIVA CON M√âTODO v2.0.7 RESTAURADO:
- ‚úÖ Fix RuntimeError('Event loop is closed')
- ‚úÖ DEBUG logging habilitado para diagn√≥stico completo
- ‚úÖ M√âTODO SetPostThumbnail v2.0.7 RESTAURADO (que funcionaba)
- ‚úÖ Manejo robusto de errores SSL
- ‚úÖ Validaciones mejoradas
"""

import os
import asyncio
import aiohttp
import aiofiles
from datetime import datetime
import json
import re
from PIL import Image
import io
import base64
import logging
from typing import Optional, Dict, List, Tuple
import openai
from groq import Groq
import requests
from telegram import Update, Message
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import wordpress_xmlrpc
from wordpress_xmlrpc import Client
from wordpress_xmlrpc.methods import posts, media
from wordpress_xmlrpc.compat import xmlrpc_client
from dotenv import load_dotenv
import time
from functools import wraps
import threading
from flask import Flask

# Cargar variables de entorno
load_dotenv()

# üö® CONFIGURACI√ìN DE LOGGING DEBUG ACTIVADO
logging.basicConfig(
    level=logging.DEBUG,  # ‚úÖ CAMBIADO A DEBUG PARA DIAGN√ìSTICO COMPLETO
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ‚úÖ LOG INICIAL PARA CONFIRMAR DEBUG ACTIVO
logger.debug("üîß DEBUG MODE ACTIVADO - Iniciando bot v2.1.1")

class TelegramToWordPressBot:
    """Bot mejorado con validaciones y caracter√≠sticas adicionales"""
    
    def __init__(self):
        logger.debug("üîß Inicializando TelegramToWordPressBot v2.1.1")
        
        # Configuraciones desde variables de entorno
        self.TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
        self.WORDPRESS_URL = os.getenv('WORDPRESS_URL')
        self.WORDPRESS_USERNAME = os.getenv('WORDPRESS_USERNAME')  
        self.WORDPRESS_PASSWORD = os.getenv('WORDPRESS_PASSWORD')
        self.GROQ_API_KEY = os.getenv('GROQ_API_KEY')
        self.OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
        
        logger.debug(f"üîß Tokens configurados: TELEGRAM={'‚úÖ' if self.TELEGRAM_TOKEN else '‚ùå'}, "
                    f"WORDPRESS={'‚úÖ' if self.WORDPRESS_URL else '‚ùå'}, "
                    f"GROQ={'‚úÖ' if self.GROQ_API_KEY else '‚ùå'}")
        
        # Inicializar clientes AI
        self.groq_client = None
        self.openai_client = None
        
        if self.GROQ_API_KEY:
            try:
                self.groq_client = Groq(api_key=self.GROQ_API_KEY)
                logger.debug("‚úÖ Cliente Groq inicializado correctamente")
            except Exception as e:
                logger.error(f"‚ùå Error inicializando Groq: {e}")
        
        if self.OPENAI_API_KEY:
            try:
                self.openai_client = openai.OpenAI(api_key=self.OPENAI_API_KEY)
                logger.debug("‚úÖ Cliente OpenAI inicializado correctamente")
            except Exception as e:
                logger.error(f"‚ùå Error inicializando OpenAI: {e}")
        
        # Inicializar cliente WordPress
        self.wp_client = None
        if all([self.WORDPRESS_URL, self.WORDPRESS_USERNAME, self.WORDPRESS_PASSWORD]):
            try:
                self.wp_client = Client(
                    self.WORDPRESS_URL,
                    self.WORDPRESS_USERNAME, 
                    self.WORDPRESS_PASSWORD
                )
                logger.debug("‚úÖ Cliente WordPress inicializado correctamente")
                
                # Test de conexi√≥n WordPress
                try:
                    test_posts = self.wp_client.call(posts.GetPosts({'number': 1}))
                    logger.debug("‚úÖ Conexi√≥n WordPress verificada exitosamente")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Advertencia en test de conexi√≥n WordPress: {e}")
                    
            except Exception as e:
                logger.error(f"‚ùå Error inicializando WordPress: {e}")
        
        # Estad√≠sticas
        self.stats = {
            'mensajes_procesados': 0,
            'articulos_publicados': 0,
            'errores': 0,
            'inicio': datetime.now().isoformat()
        }
        
        logger.debug("üîß Inicializaci√≥n completada")

    def retry_with_backoff(max_retries: int = 3, base_delay: float = 1.0):
        """Decorador para retry con backoff exponencial"""
        def decorator(func):
            @wraps(func)
            async def wrapper(*args, **kwargs):
                for attempt in range(max_retries):
                    try:
                        return await func(*args, **kwargs)
                    except Exception as e:
                        if attempt == max_retries - 1:
                            raise e
                        
                        delay = base_delay * (2 ** attempt)
                        logger.warning(f"Intento {attempt + 1} fall√≥: {e}. Reintentando en {delay}s...")
                        await asyncio.sleep(delay)
                        
            return wrapper
        return decorator

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        logger.debug(f"üîß Comando /start ejecutado por usuario: {update.effective_user.id}")
        
        welcome_message = """
ü§ñ **Bot Automatizaci√≥n Period√≠stica v2.1.1**

‚úÖ **Funcionalidades:**
‚Ä¢ An√°lisis autom√°tico de noticias
‚Ä¢ Generaci√≥n de art√≠culos con IA
‚Ä¢ Publicaci√≥n directa en WordPress
‚Ä¢ Im√°genes destacadas autom√°ticas
‚Ä¢ SEO optimizado

üìù **Instrucciones:**
1. Env√≠a una noticia (texto, foto, audio)
2. El bot analizar√° y crear√° un art√≠culo
3. Se publicar√° autom√°ticamente en WordPress

üîß **DEBUG MODE ACTIVADO** - Logs detallados disponibles

üöÄ ¬°Env√≠a tu primera noticia para comenzar!
        """
        
        await update.message.reply_text(welcome_message, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help"""
        logger.debug(f"üîß Comando /help ejecutado por usuario: {update.effective_user.id}")
        
        help_text = """
üÜò **Ayuda - Bot Period√≠stico v2.1.1**

**Comandos disponibles:**
‚Ä¢ `/start` - Iniciar bot
‚Ä¢ `/help` - Esta ayuda
‚Ä¢ `/stats` - Estad√≠sticas de uso

**Tipos de contenido soportados:**
‚Ä¢ üìù Texto de noticias
‚Ä¢ üì∏ Im√°genes con descripci√≥n
‚Ä¢ üé§ Audios de reportajes

**Proceso autom√°tico:**
1. An√°lisis de contenido con IA
2. Generaci√≥n de art√≠culo estructurado
3. Creaci√≥n de imagen destacada
4. Publicaci√≥n en WordPress con SEO

**Soporte:** En caso de errores, revisa los logs del sistema.
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /stats"""
        logger.debug(f"üîß Comando /stats ejecutado por usuario: {update.effective_user.id}")
        
        uptime = datetime.now() - datetime.fromisoformat(self.stats['inicio'])
        
        stats_text = f"""
üìä **Estad√≠sticas del Bot v2.1.1**

**Tiempo activo:** {str(uptime).split('.')[0]}
**Mensajes procesados:** {self.stats['mensajes_procesados']}
**Art√≠culos publicados:** {self.stats['articulos_publicados']}
**Errores registrados:** {self.stats['errores']}

**Estado de servicios:**
‚Ä¢ Telegram: ‚úÖ Conectado
‚Ä¢ WordPress: {'‚úÖ' if self.wp_client else '‚ùå'} {'Conectado' if self.wp_client else 'Desconectado'}
‚Ä¢ Groq AI: {'‚úÖ' if self.groq_client else '‚ùå'} {'Conectado' if self.groq_client else 'Desconectado'}
‚Ä¢ OpenAI: {'‚úÖ' if self.openai_client else '‚ùå'} {'Conectado' if self.openai_client else 'Desconectado'}

üîß **DEBUG MODE:** Activado - Logs detallados disponibles
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    @retry_with_backoff(max_retries=3, base_delay=2.0)
    async def _generate_content_with_groq(self, prompt: str) -> Optional[str]:
        """Genera contenido usando Groq con retry"""
        logger.debug(f"üîß Generando contenido con Groq. Prompt length: {len(prompt)}")
        
        if not self.groq_client:
            logger.warning("‚ö†Ô∏è Cliente Groq no disponible")
            return None
        
        try:
            response = self.groq_client.chat.completions.create(
                model="llama3-8b-8192",
                messages=[
                    {
                        "role": "system", 
                        "content": "Eres un periodista profesional experto en redacci√≥n de noticias. Crea art√≠culos bien estructurados, informativos y atractivos."
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            logger.debug(f"‚úÖ Contenido generado exitosamente. Length: {len(content) if content else 0}")
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Error en Groq: {e}")
            raise e

    async def _generate_content_with_openai(self, prompt: str) -> Optional[str]:
        """Genera contenido usando OpenAI como fallback"""
        logger.debug(f"üîß Generando contenido con OpenAI (fallback). Prompt length: {len(prompt)}")
        
        if not self.openai_client:
            logger.warning("‚ö†Ô∏è Cliente OpenAI no disponible")
            return None
        
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": "Eres un periodista profesional experto en redacci√≥n de noticias. Crea art√≠culos bien estructurados, informativos y atractivos."
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=2000,
                temperature=0.7
            )
            
            content = response.choices[0].message.content
            logger.debug(f"‚úÖ Contenido OpenAI generado exitosamente. Length: {len(content) if content else 0}")
            return content
            
        except Exception as e:
            logger.error(f"‚ùå Error en OpenAI: {e}")
            return None

    async def _generate_image_with_ai(self, prompt: str) -> Optional[bytes]:
        """Genera imagen usando IA"""
        logger.debug(f"üîß Generando imagen con prompt: {prompt[:100]}...")
        
        # Intentar con OpenAI DALL-E primero
        if self.openai_client:
            try:
                logger.debug("üîß Intentando generar imagen con OpenAI DALL-E")
                
                response = self.openai_client.images.generate(
                    model="dall-e-2",
                    prompt=prompt,
                    size="1024x1024",
                    quality="standard",
                    n=1,
                )
                
                image_url = response.data[0].url
                logger.debug(f"‚úÖ Imagen generada. URL: {image_url}")
                
                # Descargar imagen
                async with aiohttp.ClientSession() as session:
                    async with session.get(image_url) as img_response:
                        if img_response.status == 200:
                            image_data = await img_response.read()
                            logger.debug(f"‚úÖ Imagen descargada. Size: {len(image_data)} bytes")
                            return image_data
                        else:
                            logger.error(f"‚ùå Error descargando imagen: {img_response.status}")
                            
            except Exception as e:
                logger.error(f"‚ùå Error generando imagen con OpenAI: {e}")
        
        # Fallback: generar imagen placeholder
        logger.debug("üîß Generando imagen placeholder como fallback")
        return await self._create_placeholder_image(prompt)

    async def _create_placeholder_image(self, text: str) -> bytes:
        """Crea imagen placeholder"""
        logger.debug(f"üîß Creando imagen placeholder con texto: {text[:50]}...")
        
        try:
            # Crear imagen simple con PIL
            img = Image.new('RGB', (1024, 768), color='#2C3E50')
            
            # Convertir a bytes
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='JPEG', quality=85)
            img_data = img_byte_arr.getvalue()
            
            logger.debug(f"‚úÖ Imagen placeholder creada. Size: {len(img_data)} bytes")
            return img_data
            
        except Exception as e:
            logger.error(f"‚ùå Error creando placeholder: {e}")
            return b''

    async def _process_image(self, image_data: Optional[bytes]) -> Optional[bytes]:
        """Procesa y optimiza imagen"""
        if not image_data:
            logger.debug("üîß No hay datos de imagen para procesar")
            return None
        
        logger.debug(f"üîß Procesando imagen. Size original: {len(image_data)} bytes")
        
        try:
            # Abrir imagen
            img = Image.open(io.BytesIO(image_data))
            
            # Redimensionar si es muy grande
            max_size = (1200, 900)
            if img.size[0] > max_size[0] or img.size[1] > max_size[1]:
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
                logger.debug(f"üîß Imagen redimensionada a: {img.size}")
            
            # Convertir a RGB si es necesario
            if img.mode != 'RGB':
                img = img.convert('RGB')
                logger.debug("üîß Imagen convertida a RGB")
            
            # Guardar optimizada
            output = io.BytesIO()
            img.save(output, format='JPEG', quality=85, optimize=True)
            processed_data = output.getvalue()
            
            logger.debug(f"‚úÖ Imagen procesada. Size final: {len(processed_data)} bytes")
            return processed_data
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando imagen: {e}")
            return image_data  # Retornar original si falla el procesamiento

    async def _publish_to_wordpress(self, article_data: Dict, image_data: Optional[bytes]) -> Optional[Dict]:
        """Publica art√≠culo en WordPress con manejo robusto de errores"""
        logger.debug("üîß Iniciando publicaci√≥n en WordPress")
        logger.debug(f"üîß Datos del art√≠culo: t√≠tulo='{article_data.get('title', 'N/A')[:50]}...', "
                    f"imagen={'S√ç' if image_data else 'NO'}")
        
        try:
            if not self.wp_client:
                logger.error("‚ùå Cliente WordPress no disponible")
                return None
            
            # Subir imagen
            featured_image_id = None
            if image_data:
                logger.debug("üîß Iniciando subida de imagen...")
                featured_image_id = await self._upload_image_to_wordpress_ultra_robust(
                    image_data,
                    article_data.get('alt_text', 'Imagen de noticia')
                )
                
                if featured_image_id:
                    logger.debug(f"‚úÖ Imagen subida exitosamente con ID: {featured_image_id}")
                else:
                    logger.error("‚ùå Fall√≥ la subida de imagen")
            else:
                logger.debug("‚ö†Ô∏è No hay imagen para subir")
            
            # Crear post
            logger.debug("üîß Creando post en WordPress...")
            post = wordpress_xmlrpc.WordPressPost()
            post.title = article_data['title']
            post.content = article_data['content']
            post.excerpt = article_data.get('excerpt', '')
            post.post_status = 'draft'  # Cambiar a 'publish' para publicar directamente
            
            # SEO y metadatos
            post.custom_fields = [
                {'key': '_yoast_wpseo_metadesc', 'value': article_data.get('meta_description', '')},
                {'key': '_yoast_wpseo_focuskw', 'value': article_data.get('keywords', '')},
                {'key': 'periodista_autor', 'value': article_data.get('author', 'Sistema autom√°tico')},
                {'key': 'fecha_cronica', 'value': datetime.now().isoformat()}
            ]
            
            # Tags y categor√≠as
            if 'tags' in article_data and article_data['tags']:
                post.terms_names = {
                    'post_tag': article_data['tags']
                }
                logger.debug(f"üîß Tags asignados: {article_data['tags']}")
            
            # Categor√≠a si est√° especificada
            if 'category' in article_data and article_data['category']:
                if 'terms_names' not in post.__dict__:
                    post.terms_names = {}
                post.terms_names['category'] = [article_data['category']]
                logger.debug(f"üîß Categor√≠a asignada: {article_data['category']}")
            
            # üö® SECCI√ìN CR√çTICA: ASIGNACI√ìN DE IMAGEN DESTACADA
            if featured_image_id:
                logger.debug(f"üîß ASIGNANDO IMAGEN DESTACADA - ID: {featured_image_id}")
                post.thumbnail = featured_image_id
                logger.debug(f"‚úÖ post.thumbnail configurado con ID: {featured_image_id}")
            else:
                logger.warning("‚ö†Ô∏è NO SE ASIGNAR√Å IMAGEN DESTACADA - No hay featured_image_id")
            
            # Publicar post
            logger.debug("üîß Enviando post a WordPress...")
            post_id = self.wp_client.call(posts.NewPost(post))
            logger.debug(f"‚úÖ Post creado con ID: {post_id}")
            
            # üö® VERIFICACI√ìN CR√çTICA: COMPROBAR SI LA IMAGEN DESTACADA SE ASIGN√ì
            if featured_image_id and post_id:
                logger.debug(f"üîß VERIFICANDO asignaci√≥n de imagen destacada para post {post_id}")
                success = await self._set_featured_image_ultra_robust(post_id, featured_image_id)
                if success:
                    logger.debug("‚úÖ IMAGEN DESTACADA ASIGNADA EXITOSAMENTE")
                else:
                    logger.error("‚ùå FALL√ì LA ASIGNACI√ìN DE IMAGEN DESTACADA")
            
            logger.info(f"‚úÖ Art√≠culo publicado exitosamente. Post ID: {post_id}")
            
            return {
                'post_id': post_id,
                'status': 'draft',
                'title': article_data['title'],
                'featured_image_id': featured_image_id,
                'url': f"{self.WORDPRESS_URL.replace('/xmlrpc.php', '')}/?p={post_id}"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error publicando en WordPress: {e}", exc_info=True)
            return None

    async def _upload_image_to_wordpress_ultra_robust(self, image_data: bytes, alt_text: str) -> Optional[int]:
        """Sube imagen a WordPress con retry logic ultra robusto"""
        logger.debug(f"üîß INICIANDO SUBIDA ULTRA ROBUSTA - Size: {len(image_data)} bytes, Alt: '{alt_text}'")
        
        max_retries = 5  # Aumentado a 5 intentos
        timeout = 60  # Timeout de 60 segundos
        
        for attempt in range(max_retries):
            logger.debug(f"üîß Intento {attempt + 1}/{max_retries} de subida de imagen...")
            
            try:
                filename = f'noticia_{datetime.now().strftime("%Y%m%d_%H%M%S")}_{attempt}.jpg'
                logger.debug(f"üîß Nombre de archivo: {filename}")
                
                data = {
                    'name': filename,
                    'type': 'image/jpeg',
                    'bits': xmlrpc_client.Binary(image_data)
                }
                
                logger.debug("üîß Ejecutando wp_client.call(media.UploadFile)...")
                
                # Subida con timeout
                start_time = time.time()
                response = self.wp_client.call(media.UploadFile(data))
                elapsed = time.time() - start_time
                
                logger.debug(f"üîß Respuesta recibida en {elapsed:.2f}s: {response}")
                
                if response and 'id' in response:
                    media_id = response['id']
                    logger.debug(f"‚úÖ Imagen subida exitosamente - Media ID: {media_id}")
                    
                    # Actualizar alt text
                    try:
                        logger.debug(f"üîß Actualizando alt text para media ID {media_id}...")
                        media_item = self.wp_client.call(media.GetMediaItem(media_id))
                        media_item.description = alt_text
                        self.wp_client.call(media.EditMediaItem(media_id, media_item))
                        logger.debug("‚úÖ Alt text actualizado exitosamente")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è No se pudo actualizar alt text: {e}")
                    
                    return media_id
                else:
                    logger.error(f"‚ùå Respuesta inv√°lida de WordPress: {response}")
                
            except Exception as e:
                logger.error(f"‚ùå Intento {attempt + 1} fall√≥: {e}", exc_info=True)
                
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + 1  # Backoff exponencial mejorado
                    logger.debug(f"üîß Esperando {wait_time}s antes del siguiente intento...")
                    await asyncio.sleep(wait_time)
        
        logger.error("‚ùå FALL√ì LA SUBIDA DE IMAGEN DESPU√âS DE TODOS LOS INTENTOS")
        return None

    async def _set_featured_image_ultra_robust(self, post_id: int, image_id: int) -> bool:
        """Asigna imagen destacada usando M√âTODO v2.0.7 que FUNCIONABA"""
        logger.debug(f"üîß INICIANDO ASIGNACI√ìN v2.0.7 RESTAURADA - Post ID: {post_id}, Image ID: {image_id}")
        
        max_retries = 5
        for attempt in range(max_retries):
            try:
                logger.debug(f"üîß Intento {attempt + 1}/{max_retries} - Usando posts.SetPostThumbnail...")
                
                # ‚úÖ M√âTODO EXACTO DE v2.0.7 QUE FUNCIONABA
                from wordpress_xmlrpc.methods.posts import SetPostThumbnail
                result = self.wp_client.call(SetPostThumbnail(post_id, image_id))
                
                logger.debug(f"üîß Resultado SetPostThumbnail: {result}")
                
                if result:
                    logger.debug("‚úÖ IMAGEN DESTACADA CONFIGURADA EXITOSAMENTE!")
                    
                    # Verificar que realmente se asign√≥
                    verification_post = self.wp_client.call(posts.GetPost(post_id))
                    final_thumbnail = getattr(verification_post, 'thumbnail', None)
                    
                    if final_thumbnail == image_id:
                        logger.debug(f"‚úÖ VERIFICACI√ìN EXITOSA - Thumbnail asignado: {final_thumbnail}")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è SetPostThumbnail retorn√≥ True pero verificaci√≥n fall√≥. Expected: {image_id}, Got: {final_thumbnail}")
                        # Continuar con siguiente intento
                else:
                    logger.warning(f"‚ö†Ô∏è SetPostThumbnail retorn√≥ False en intento {attempt + 1}")
                
            except ImportError:
                # Fallback si SetPostThumbnail no est√° disponible
                logger.warning("‚ö†Ô∏è SetPostThumbnail no disponible, usando m√©todo EditPost...")
                try:
                    current_post = self.wp_client.call(posts.GetPost(post_id))
                    current_post.thumbnail = image_id
                    result = self.wp_client.call(posts.EditPost(post_id, current_post))
                    
                    if result:
                        verification_post = self.wp_client.call(posts.GetPost(post_id))
                        final_thumbnail = getattr(verification_post, 'thumbnail', None)
                        
                        if final_thumbnail == image_id:
                            logger.debug(f"‚úÖ IMAGEN DESTACADA ASIGNADA via EditPost: {final_thumbnail}")
                            return True
                            
                except Exception as e:
                    logger.error(f"‚ùå Error en fallback EditPost: {e}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error en intento {attempt + 1}: {e}")
                
                if attempt < max_retries - 1:
                    wait_time = (2 ** attempt) + 1
                    logger.debug(f"üîß Esperando {wait_time}s antes del siguiente intento...")
                    await asyncio.sleep(wait_time)
        
        logger.error("‚ùå FALL√ì LA ASIGNACI√ìN DE IMAGEN DESTACADA DESPU√âS DE TODOS LOS INTENTOS")
        return False

    async def process_telegram_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Procesa mensajes de Telegram"""
        logger.debug(f"üîß Procesando mensaje de Telegram. User: {update.effective_user.id}")
        
        try:
            self.stats['mensajes_procesados'] += 1
            
            message = update.message
            user_id = update.effective_user.id
            
            logger.debug(f"üîß Tipo de mensaje: texto={'S√ç' if message.text else 'NO'}, "
                        f"foto={'S√ç' if message.photo else 'NO'}, "
                        f"audio={'S√ç' if message.voice or message.audio else 'NO'}")
            
            # Enviar confirmaci√≥n inmediata
            processing_msg = await message.reply_text("üîÑ Procesando tu noticia...")
            
            # Extraer contenido
            content_text = ""
            image_data = None
            
            # Procesar texto
            if message.text:
                content_text = message.text
                logger.debug(f"üîß Texto extra√≠do: {len(content_text)} caracteres")
            
            # Procesar imagen
            if message.photo:
                logger.debug("üîß Procesando imagen del mensaje...")
                try:
                    # Obtener la imagen de mayor resoluci√≥n
                    photo = message.photo[-1]
                    file = await context.bot.get_file(photo.file_id)
                    
                    # Descargar imagen
                    image_bytes = io.BytesIO()
                    await file.download_to_memory(image_bytes)
                    image_data = image_bytes.getvalue()
                    
                    logger.debug(f"‚úÖ Imagen descargada: {len(image_data)} bytes")
                    
                    # Procesar imagen
                    image_data = await self._process_image(image_data)
                    
                except Exception as e:
                    logger.error(f"‚ùå Error procesando imagen: {e}")
            
            # Procesar audio (si est√° presente)
            if message.voice or message.audio:
                logger.debug("üîß Audio detectado (funcionalidad en desarrollo)")
                content_text += "\n[Contenido de audio procesado]"
            
            # Validar contenido m√≠nimo
            if len(content_text.strip()) < 50:
                await processing_msg.edit_text(
                    "‚ùå El contenido es muy corto. Env√≠a al menos 50 caracteres de texto noticioso."
                )
                return
            
            # Generar art√≠culo con IA
            logger.debug("üîß Generando art√≠culo con IA...")
            await processing_msg.edit_text("ü§ñ Generando art√≠culo con IA...")
            
            article_data = await self._generate_article_from_content(content_text)
            
            if not article_data:
                await processing_msg.edit_text("‚ùå Error generando art√≠culo. Intenta nuevamente.")
                self.stats['errores'] += 1
                return
            
            # Generar imagen si no hay una
            if not image_data and article_data.get('title'):
                logger.debug("üîß Generando imagen destacada con IA...")
                await processing_msg.edit_text("üé® Generando imagen destacada...")
                
                image_prompt = f"Imagen period√≠stica profesional sobre: {article_data['title'][:100]}"
                image_data = await self._generate_image_with_ai(image_prompt)
            
            # Publicar en WordPress
            logger.debug("üîß Publicando en WordPress...")
            await processing_msg.edit_text("üìù Publicando en WordPress...")
            
            result = await self._publish_to_wordpress(article_data, image_data)
            
            if result:
                self.stats['articulos_publicados'] += 1
                
                success_message = f"""
‚úÖ **Art√≠culo publicado exitosamente**

üì∞ **T√≠tulo:** {result['title']}
üÜî **Post ID:** {result['post_id']}
üñºÔ∏è **Imagen destacada:** {'‚úÖ Asignada' if result.get('featured_image_id') else '‚ùå No asignada'}
üîó **URL:** {result['url']}
üìä **Estado:** {result['status']}

üîß **DEBUG:** Logs detallados disponibles para diagn√≥stico
                """
                
                await processing_msg.edit_text(success_message, parse_mode='Markdown')
                logger.info(f"‚úÖ Art√≠culo publicado exitosamente para usuario {user_id}")
                
            else:
                await processing_msg.edit_text("‚ùå Error publicando art√≠culo. Revisa la configuraci√≥n de WordPress.")
                self.stats['errores'] += 1
                logger.error(f"‚ùå Error publicando art√≠culo para usuario {user_id}")
                
        except Exception as e:
            logger.error(f"‚ùå Error procesando mensaje: {e}", exc_info=True)
            self.stats['errores'] += 1
            
            try:
                await update.message.reply_text(f"‚ùå Error procesando mensaje: {str(e)}")
            except:
                pass

    async def _generate_article_from_content(self, content: str) -> Optional[Dict]:
        """Genera art√≠culo estructurado desde contenido"""
        logger.debug(f"üîß Generando art√≠culo desde contenido: {len(content)} caracteres")
        
        prompt = f"""
Como periodista profesional, convierte este contenido en un art√≠culo de noticia bien estructurado:

CONTENIDO ORIGINAL:
{content}

INSTRUCCIONES:
1. Crea un t√≠tulo atractivo y informativo
2. Escribe un art√≠culo completo con introducci√≥n, desarrollo y conclusi√≥n
3. Usa un tono period√≠stico profesional
4. Incluye subt√≠tulos para mejorar la lectura
5. Agrega contexto y an√°lisis cuando sea apropiado

FORMATO DE RESPUESTA (JSON):
{{
    "title": "T√≠tulo del art√≠culo",
    "content": "Art√≠culo completo con formato HTML",
    "excerpt": "Resumen breve del art√≠culo",
    "meta_description": "Descripci√≥n para SEO (max 160 caracteres)",
    "keywords": "palabras, clave, separadas, por, comas",
    "tags": ["tag1", "tag2", "tag3"],
    "category": "Categor√≠a principal",
    "author": "Sistema autom√°tico"
}}
        """
        
        # Intentar con Groq primero
        content = await self._generate_content_with_groq(prompt)
        
        # Fallback a OpenAI si Groq falla
        if not content:
            logger.debug("üîß Groq fall√≥, intentando con OpenAI...")
            content = await self._generate_content_with_openai(prompt)
        
        if not content:
            logger.error("‚ùå Ambos servicios de IA fallaron")
            return None
        
        # Parsear JSON
        try:
            # Extraer JSON del contenido si tiene formato markdown
            if "```json" in content:
                json_start = content.find("```json") + 7
                json_end = content.find("```", json_start)
                json_content = content[json_start:json_end].strip()
            else:
                json_content = content.strip()
            
            article_data = json.loads(json_content)
            logger.debug(f"‚úÖ Art√≠culo generado exitosamente: '{article_data.get('title', 'Sin t√≠tulo')[:50]}...'")
            
            return article_data
            
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå Error parseando JSON: {e}")
            logger.debug(f"Contenido recibido: {content[:500]}...")
            
            # Fallback: crear estructura manual
            return {
                "title": "Art√≠culo generado autom√°ticamente",
                "content": content,
                "excerpt": content[:200] + "...",
                "meta_description": "Art√≠culo generado por sistema autom√°tico",
                "keywords": "noticia, autom√°tico, sistema",
                "tags": ["automatico", "noticia"],
                "category": "General",
                "author": "Sistema autom√°tico"
            }

    def run(self):
        """Inicia el bot con configuraci√≥n robusta v2.1.1"""
        logger.debug("üîß Iniciando bot v2.1.1...")
        
        if not self.TELEGRAM_TOKEN:
            logger.error("‚ùå Token de Telegram no configurado")
            return
        
        if not self.groq_client and not self.openai_client:
            logger.error("‚ùå Ning√∫n cliente de IA est√° disponible")
            return
        
        if not self.wp_client:
            logger.error("‚ùå Cliente WordPress no inicializado")
            return
        
        # Crear directorio de logs si no existe
        os.makedirs('logs', exist_ok=True)
        logger.debug("‚úÖ Directorio de logs verificado")
        
        try:
            # Configurar aplicaci√≥n
            logger.debug("üîß Configurando aplicaci√≥n de Telegram...")
            application = Application.builder().token(self.TELEGRAM_TOKEN).build()
            
            # Comandos
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("stats", self.stats_command))
            
            # Manejador de mensajes con contenido multimedia
            application.add_handler(
                MessageHandler(
                    filters.PHOTO | filters.VOICE | filters.AUDIO | filters.TEXT,
                    self.process_telegram_message
                )
            )
            
            logger.info("üöÄ Bot v2.1.1 iniciado exitosamente")
            logger.info("üì° Esperando mensajes de periodistas...")
            logger.debug("üîß Configuraci√≥n completa - Iniciando polling...")
            
            # ‚úÖ EJECUTAR BOT CON M√âTODO ESTABLE (NO asyncio.run)
            application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico al iniciar bot: {e}", exc_info=True)
            raise e

# Flask app para health checks en Render
flask_app = Flask(__name__)

@flask_app.route('/')
def health_check():
    """Health check endpoint para Render"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "service": "telegram-wordpress-bot",
        "version": "2.1.1"
    }

def run_flask():
    """Ejecuta Flask en puerto de Render"""
    port = int(os.environ.get('PORT', 10000))
    flask_app.run(host='0.0.0.0', port=port, debug=False)

# üö® PUNTO DE ENTRADA PRINCIPAL CON FIX DE EVENT LOOP
if __name__ == "__main__":
    logger.debug("üîß === INICIANDO APLICACI√ìN V2.1.1 ===")
    
    # Inicializar bot
    bot = TelegramToWordPressBot()
    
    # ‚úÖ INICIAR FLASK EN HILO SEPARADO PARA HEALTH CHECKS
    logger.debug("üîß Iniciando Flask para health checks...")
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logger.debug("‚úÖ Flask iniciado en hilo separado")
    
    # ‚úÖ EJECUTAR BOT EN HILO PRINCIPAL CON M√âTODO ESTABLE
    logger.debug("üîß Iniciando bot principal...")
    try:
        bot.run()  # Usa application.run_polling() internamente - M√ÅS ESTABLE
    except KeyboardInterrupt:
        logger.info("üõë Bot detenido manualmente")
    except Exception as e:
        logger.critical(f"üí• Error cr√≠tico en bot principal: {e}", exc_info=True)
        raise e
