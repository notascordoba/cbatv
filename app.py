#!/usr/bin/env python3
"""
VERSI√ìN v1.1.3 - Correcciones Espec√≠ficas SEO
Basado en: app_v1.1.2.py (base funcional)

CHANGELOG v1.1.3:
- FIXED: Modelo Groq (llama-3.1-8b-instant)
- FIXED: Alt text de imagen (implementaci√≥n corregida)
- IMPROVED: Extracci√≥n de keywords m√°s inteligente
- IMPROVED: Consulta categor√≠as WordPress reales
- IMPROVED: Densidad keywords optimizada (sin√≥nimos)
- IMPROVED: T√≠tulos espec√≠ficos seg√∫n contexto

Autor: MiniMax Agent
Fecha: 2025-09-21
"""

import os
import asyncio
import aiohttp
import aiofiles
from datetime import datetime
import json
import re
from PIL import Image
import io
import base64
import logging
from typing import Optional, Dict, List, Tuple

# Fix para compatibilidad Python 3.10+ con wordpress_xmlrpc
import collections
import collections.abc
if not hasattr(collections, 'Iterable'):
    collections.Iterable = collections.abc.Iterable

# Import opcional de OpenAI (solo para transcripci√≥n de audio)
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    openai = None
    OPENAI_AVAILABLE = False
    
from groq import Groq
import requests
from telegram import Update, Message, Bot
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
import wordpress_xmlrpc
from wordpress_xmlrpc import Client
from wordpress_xmlrpc.methods import posts, media, taxonomies
from wordpress_xmlrpc.compat import xmlrpc_client
from flask import Flask, request, jsonify

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AutomacionPeriodisticaV1:
    def __init__(self):
        """Inicializar sistema completo de automatizaci√≥n period√≠stica"""
        logger.info("üöÄ Inicializando Sistema de Automatizaci√≥n Period√≠stica v1.1.3")
        
        # Configuraciones b√°sicas
        self.MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB
        self.SUPPORTED_FORMATS = ['jpg', 'jpeg', 'png', 'webp']
        self.TARGET_WIDTH = 1200
        self.TARGET_HEIGHT = 630
        self.IMAGE_QUALITY = 85
        
        # Cache de categor√≠as WordPress
        self.wordpress_categories = []
        
        # Estad√≠sticas
        self.stats = {
            'articulos_creados': 0,
            'imagenes_procesadas': 0,
            'errores': 0,
            'inicio_sistema': datetime.now().isoformat()
        }
        
        # Configuraci√≥n de servicios
        self._setup_services()
        
        logger.info("‚úÖ Sistema inicializado correctamente")

    def _setup_services(self):
        """Configurar todos los servicios necesarios"""
        try:
            # Configurar Groq
            groq_api_key = os.getenv('GROQ_API_KEY')
            if not groq_api_key:
                raise ValueError("‚ùå GROQ_API_KEY no configurada")
            
            self.groq_client = Groq(api_key=groq_api_key)
            logger.info("‚úÖ Groq configurado")
            
            # Configurar WordPress
            wp_url = os.getenv('WORDPRESS_URL')
            wp_username = os.getenv('WORDPRESS_USERNAME')
            wp_password = os.getenv('WORDPRESS_PASSWORD')
            
            if not all([wp_url, wp_username, wp_password]):
                raise ValueError("‚ùå Credenciales de WordPress incompletas")
            
            xmlrpc_url = f"{wp_url.rstrip('/')}/xmlrpc.php"
            self.wordpress_client = Client(xmlrpc_url, wp_username, wp_password)
            logger.info("‚úÖ WordPress configurado")
            
            # Configurar Telegram
            telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not telegram_token:
                raise ValueError("‚ùå TELEGRAM_BOT_TOKEN no configurado")
            
            self.bot = Bot(token=telegram_token)
            logger.info("‚úÖ Telegram configurado")
            
            # Cargar categor√≠as WordPress
            self._cargar_categorias_wordpress()
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando servicios: {e}")
            raise

    def _cargar_categorias_wordpress(self):
        """Cargar categor√≠as existentes de WordPress"""
        try:
            categorias = self.wordpress_client.call(taxonomies.GetTerms('category'))
            self.wordpress_categories = [cat.name for cat in categorias if hasattr(cat, 'name')]
            logger.info(f"‚úÖ Categor√≠as WordPress cargadas: {self.wordpress_categories}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error cargando categor√≠as: {e}")
            self.wordpress_categories = ['Actualidad', 'Econom√≠a', 'Pol√≠tica', 'Sociedad']

    def _extraer_palabra_clave_inteligente(self, texto: str) -> str:
        """Extraer palabra clave inteligente basada en contexto"""
        try:
            texto_lower = texto.lower()
            
            # Patrones espec√≠ficos para identificar contexto
            patrones_contexto = {
                'compras chile': ['chile', 'compras', 'franquicia', 'aduana', 'l√≠mite', 'topes'],
                'turismo argentina': ['turismo', 'viaje', 'argentina', 'visita', 'destino'],
                'econom√≠a argentina': ['inflaci√≥n', 'peso', 'd√≥lar', 'econom√≠a', 'precio'],
                'pol√≠tica argentina': ['gobierno', 'presidente', 'congreso', 'ley', 'pol√≠tica'],
                'tecnolog√≠a': ['celular', 'computadora', 'internet', 'tecnolog√≠a', 'digital'],
                'salud': ['salud', 'medicina', 'hospital', 'm√©dico', 'enfermedad'],
                'educaci√≥n': ['escuela', 'universidad', 'educaci√≥n', 'estudiante', 'docente']
            }
            
            # Buscar contexto m√°s relevante
            for contexto, palabras_clave in patrones_contexto.items():
                matches = sum(1 for palabra in palabras_clave if palabra in texto_lower)
                if matches >= 2:  # Al menos 2 palabras del contexto
                    if 'chile' in contexto and ('compras' in texto_lower or 'topes' in texto_lower):
                        return 'topes aduana chile'
                    elif 'turismo' in contexto:
                        return 'turismo argentina'
                    elif 'econom√≠a' in contexto:
                        return 'econom√≠a argentina'
                    # Agregar m√°s contextos espec√≠ficos...
            
            # Si no encuentra contexto espec√≠fico, extraer palabras m√°s relevantes
            # Limpiar texto
            texto_limpio = re.sub(r'[^\w\s]', ' ', texto_lower)
            palabras = texto_limpio.split()
            
            # Filtrar palabras muy comunes
            stop_words = ['el', 'la', 'los', 'las', 'de', 'del', 'a', 'en', 'con', 'por', 'para', 'es', 'son', 'un', 'una', 'que', 'se', 'no', 'te', 'le', 'da', 'su', 'son', 'no', 'te', 'lo', 'al', 'ya', 'me', 'si', 'al', 'tienen', 'puede', 'como', 'm√°s', 'cada', 'mientras', 'manera']
            palabras_filtradas = [p for p in palabras if len(p) > 2 and p not in stop_words]
            
            # Buscar combinaciones significativas
            if len(palabras_filtradas) >= 2:
                # Priorizar combinaciones con sentido
                for i in range(len(palabras_filtradas) - 1):
                    combinacion = f"{palabras_filtradas[i]} {palabras_filtradas[i+1]}"
                    if any(keyword in combinacion for keyword in ['topes', 'l√≠mites', 'franquicia', 'compras']):
                        keyword = combinacion
                        break
                else:
                    keyword = ' '.join(palabras_filtradas[:2])
            else:
                keyword = palabras_filtradas[0] if palabras_filtradas else 'actualidad'
            
            logger.info(f"üéØ Palabra clave inteligente: '{keyword}'")
            return keyword
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error extrayendo palabra clave: {e}")
            return "actualidad"

    def _generar_prompt_profesional_v3(self, texto_usuario: str, palabra_clave: str) -> str:
        """Genera prompt mejorado con densidad de keywords optimizada"""
        
        # Obtener categor√≠as disponibles
        categorias_str = ', '.join(self.wordpress_categories)
        
        prompt = f"""Sos un PERIODISTA PROFESIONAL especializado en redacci√≥n SEO para medios digitales argentinos. Cre√°s art√≠culos informativos, serios y bien estructurados.

INFORMACI√ìN RECIBIDA:
{texto_usuario}

PALABRA CLAVE OBJETIVO: "{palabra_clave}"

CATEGOR√çAS DISPONIBLES: {categorias_str}

INSTRUCCIONES ESPEC√çFICAS:

1. **T√çTULO H1** (30-70 caracteres):
   - DEBE comenzar con "{palabra_clave}"
   - Ser espec√≠fico y descriptivo del tema real
   - Profesional, sin emojis
   - Ejemplo: "{palabra_clave}: gu√≠a completa para viajeros argentinos"

2. **META DESCRIPCI√ìN** (EXACTAMENTE 135 caracteres):
   - Incluir "{palabra_clave}"
   - Tono informativo y atractivo
   - Contar caracteres exactos

3. **SLUG**: "{palabra_clave.replace(' ', '-')}"

4. **CONTENIDO** (700-1000 palabras):
   - Expandir informaci√≥n con contexto argentino
   - Datos espec√≠ficos, fechas, cifras relevantes
   - Lenguaje natural, no rob√≥tico
   - DENSIDAD KEYWORDS: Usar "{palabra_clave}" m√°ximo 6 veces
   - Usar SIN√ìNIMOS y variaciones naturales

5. **ESTRUCTURA PROFESIONAL**:
   - H2: Qu√© necesit√°s saber sobre [tema espec√≠fico]
   - H2: Detalles y requisitos actuales
   - H2: Consejos para argentinos
   - H3: Subtemas espec√≠ficos relevantes
   - T√≠tulos descriptivos, no gen√©ricos

6. **ENLACES INTERNOS** (2-3):
   - Solo usar categor√≠as disponibles: {categorias_str}
   - Formato: <a href="/categoria/[categoria-existente]">[nombre]</a>
   - NO inventar categor√≠as inexistentes

7. **OPTIMIZACI√ìN**:
   - "{palabra_clave}" en primer p√°rrafo naturalmente
   - Sin√≥nimos: usar variaciones como "l√≠mites", "franquicias", "restricciones"
   - Evitar repetici√≥n mec√°nica
   - Lenguaje period√≠stico argentino

8. **TAGS**: Palabra clave + 3-4 t√©rminos relacionados espec√≠ficos

9. **CATEGOR√çA**: Elegir UNA de las disponibles: {categorias_str}

RESPONDER SOLO EN JSON V√ÅLIDO:

{{
    "titulo": "T√çTULO ESPEC√çFICO COMENZANDO CON PALABRA CLAVE",
    "metadescripcion": "EXACTAMENTE 135 CARACTERES CON PALABRA CLAVE",
    "palabra_clave": "{palabra_clave}",
    "slug": "{palabra_clave.replace(' ', '-')}",
    "contenido_html": "ART√çCULO PROFESIONAL CON DENSIDAD OPTIMIZADA",
    "tags": ["{palabra_clave}", "tag2", "tag3", "tag4"],
    "categoria": "CATEGOR√çA_EXISTENTE_DE_LA_LISTA"
}}

CR√çTICO: El contenido debe ser ESPEC√çFICO del tema, no gen√©rico. Si es sobre compras en Chile, que hable espec√≠ficamente de eso, no de "situaci√≥n en Argentina" en general."""

        return prompt

    async def generar_articulo_ia(self, texto_usuario: str, palabra_clave: str) -> Dict:
        """Generar art√≠culo usando IA con modelo actualizado"""
        try:
            prompt = self._generar_prompt_profesional_v3(texto_usuario, palabra_clave)
            
            logger.info("ü§ñ Generando art√≠culo profesional con IA (modelo actualizado)...")
            
            # Llamada a Groq con modelo activo
            chat_completion = self.groq_client.chat.completions.create(
                messages=[
                    {
                        "role": "system",
                        "content": "Sos un periodista profesional argentino especializado en SEO. Respond√©s SOLO en JSON v√°lido."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                model="llama-3.1-8b-instant",  # MODELO ACTUALIZADO
                temperature=0.7,
                max_tokens=4000
            )
            
            content = chat_completion.choices[0].message.content.strip()
            
            # Limpiar respuesta
            if content.startswith('```json'):
                content = content[7:]
            if content.endswith('```'):
                content = content[:-3]
            content = content.strip()
            
            try:
                article_data = json.loads(content)
                
                # Validaciones cr√≠ticas
                titulo = article_data.get('titulo', '')
                if not titulo.lower().startswith(palabra_clave.lower().split()[0]):
                    logger.warning(f"‚ö†Ô∏è T√≠tulo no comienza con palabra clave")
                
                meta_desc = article_data.get('metadescripcion', '')
                if abs(len(meta_desc) - 135) > 5:  # Tolerancia de 5 caracteres
                    logger.warning(f"‚ö†Ô∏è Meta descripci√≥n: {len(meta_desc)} chars (debe ser ~135)")
                
                # Validar categor√≠a existe
                categoria = article_data.get('categoria', 'Actualidad')
                if categoria not in self.wordpress_categories:
                    logger.warning(f"‚ö†Ô∏è Categor√≠a '{categoria}' no existe, usando 'Actualidad'")
                    article_data['categoria'] = 'Actualidad'
                
                # Contar densidad de keywords
                contenido = article_data.get('contenido_html', '')
                keyword_count = contenido.lower().count(palabra_clave.lower())
                word_count = len(contenido.split())
                if keyword_count > 8:
                    logger.warning(f"‚ö†Ô∏è Sobreoptimizaci√≥n: '{palabra_clave}' aparece {keyword_count} veces")
                
                logger.info(f"‚úÖ Art√≠culo generado: {word_count} palabras, keyword {keyword_count} veces")
                return article_data
                
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Error parseando JSON de IA: {e}")
                return self._generar_articulo_respaldo_v3(texto_usuario, palabra_clave)
                
        except Exception as e:
            logger.error(f"‚ùå Error generando art√≠culo con IA: {e}")
            return self._generar_articulo_respaldo_v3(texto_usuario, palabra_clave)

    def _generar_articulo_respaldo_v3(self, texto_usuario: str, palabra_clave: str) -> Dict:
        """Genera art√≠culo de respaldo optimizado"""
        logger.info("üîÑ Generando art√≠culo de respaldo optimizado...")
        
        # T√≠tulo espec√≠fico seg√∫n contexto
        if 'chile' in palabra_clave.lower() and 'topes' in palabra_clave.lower():
            titulo = f"{palabra_clave.title()}: gu√≠a completa para viajeros argentinos 2025"
        elif 'econom√≠a' in palabra_clave.lower():
            titulo = f"{palabra_clave.title()}: an√°lisis de la situaci√≥n actual en Argentina"
        else:
            titulo = f"{palabra_clave.title()}: informaci√≥n actualizada y detallada"
        
        # Meta descripci√≥n exacta
        meta_base = f"Conoc√© todo sobre {palabra_clave} en Argentina. Informaci√≥n actualizada, requisitos y consejos importantes para ciudadanos."
        if len(meta_base) > 135:
            meta_desc = meta_base[:132] + "..."
        else:
            meta_desc = meta_base.ljust(135)[:135]
        
        # Seleccionar categor√≠a apropiada
        categoria_seleccionada = 'Actualidad'
        if any(cat.lower() in palabra_clave.lower() for cat in self.wordpress_categories):
            for cat in self.wordpress_categories:
                if cat.lower() in palabra_clave.lower():
                    categoria_seleccionada = cat
                    break
        
        # Generar sin√≥nimos seg√∫n contexto
        if 'topes' in palabra_clave.lower():
            sinonimos = ['l√≠mites', 'franquicias', 'restricciones']
        elif 'econom√≠a' in palabra_clave.lower():
            sinonimos = ['situaci√≥n econ√≥mica', 'panorama financiero', 'contexto econ√≥mico']
        else:
            sinonimos = ['tema', 'asunto', 'cuesti√≥n']
        
        # Enlaces a categor√≠as existentes
        categorias_enlaces = [cat for cat in self.wordpress_categories if cat != categoria_seleccionada][:2]
        enlaces_html = " y ".join([f'<a href="/categoria/{cat.lower().replace(" ", "-")}">{cat.lower()}</a>' for cat in categorias_enlaces])
        
        return {
            "titulo": titulo,
            "metadescripcion": meta_desc,
            "palabra_clave": palabra_clave,
            "slug": palabra_clave.replace(' ', '-'),
            "contenido_html": f"""
<p>Te contamos todo lo que necesit√°s saber sobre <strong>{palabra_clave}</strong>, un tema que afecta directamente a los argentinos.</p>

<h2>Qu√© necesit√°s saber sobre {palabra_clave.title()}</h2>
<p>{texto_usuario}</p>

<p>Es fundamental mantenerse informado sobre estos {sinonimos[0]} que pueden impactar en tu vida diaria.</p>

<h2>Detalles y requisitos actuales</h2>
<p>Los especialistas se√±alan que las {sinonimos[1]} relacionadas con <strong>{palabra_clave}</strong> requieren atenci√≥n especial en el contexto argentino actual.</p>

<h3>Aspectos importantes para argentinos</h3>
<p>Las nuevas medidas sobre {sinonimos[2]} han generado cambios significativos que es importante conocer.</p>

<h3>Impacto en diferentes sectores</h3>
<p>El tema de <strong>{palabra_clave}</strong> tiene repercusiones en m√∫ltiples √°reas de la econom√≠a y sociedad argentina.</p>

<h2>Consejos para argentinos</h2>
<p>Para navegar correctamente estas {sinonimos[0]}, es recomendable estar al tanto de las regulaciones vigentes y consultar fuentes oficiales.</p>

<h3>Pr√≥ximos pasos y recomendaciones</h3>
<p>Los expertos recomiendan seguir de cerca la evoluci√≥n de <strong>{palabra_clave}</strong> para tomar decisiones informadas.</p>

<p>Para mantenerte actualizado sobre estos temas, consult√° nuestras secciones de {enlaces_html}.</p>
""",
            "tags": [palabra_clave] + sinonimos[:3],
            "categoria": categoria_seleccionada
        }

    async def optimizar_imagen(self, data_imagen: bytes) -> bytes:
        """Optimizar imagen para web"""
        try:
            with Image.open(io.BytesIO(data_imagen)) as img:
                # Convertir a RGB si es necesario
                if img.mode in ('RGBA', 'P', 'LA'):
                    img = img.convert('RGB')
                
                # Redimensionar manteniendo proporci√≥n
                if img.width > self.TARGET_WIDTH or img.height > self.TARGET_HEIGHT:
                    img.thumbnail((self.TARGET_WIDTH, self.TARGET_HEIGHT), Image.Resampling.LANCZOS)
                    logger.info(f"üñºÔ∏è Imagen redimensionada a {img.width}x{img.height}")
                
                # Guardar optimizada
                output = io.BytesIO()
                img.save(output, format='JPEG', quality=self.IMAGE_QUALITY, optimize=True)
                return output.getvalue()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error optimizando imagen: {e}")
            return data_imagen

    async def subir_imagen_wordpress_v3(self, data_imagen: bytes, nombre_archivo: str, 
                                       alt_text: str = "", titulo: str = "") -> Optional[int]:
        """Subir imagen a WordPress con metadatos corregidos - v1.1.3"""
        try:
            # Optimizar imagen
            imagen_optimizada = await self.optimizar_imagen(data_imagen)
            
            # Datos para upload
            upload_data = {
                'name': nombre_archivo,
                'type': 'image/jpeg',
                'bits': xmlrpc_client.Binary(imagen_optimizada),
                'overwrite': True
            }
            
            logger.info(f"üì§ Subiendo imagen: {nombre_archivo}")
            
            # Subir imagen
            respuesta = self.wordpress_client.call(media.UploadFile(upload_data))
            
            if respuesta and 'id' in respuesta:
                attachment_id = respuesta['id']
                logger.info(f"‚úÖ Imagen subida - ID: {attachment_id}")
                
                # CORRECCI√ìN v1.1.3: Configurar metadatos inmediatamente despu√©s del upload
                try:
                    # Obtener el attachment como post
                    attachment_post = self.wordpress_client.call(posts.GetPost(attachment_id))
                    
                    # Configurar t√≠tulo si se proporciona
                    if titulo:
                        attachment_post.title = titulo
                        logger.info(f"üè∑Ô∏è T√≠tulo configurado: '{titulo}'")
                    
                    # CR√çTICO: Configurar alt text correctamente
                    if alt_text:
                        # M√©todo 1: Via custom fields
                        if not hasattr(attachment_post, 'custom_fields') or not attachment_post.custom_fields:
                            attachment_post.custom_fields = []
                        
                        # Remover alt text existente
                        attachment_post.custom_fields = [
                            cf for cf in attachment_post.custom_fields 
                            if cf.get('key') != '_wp_attachment_image_alt'
                        ]
                        
                        # Agregar nuevo alt text
                        attachment_post.custom_fields.append({
                            'key': '_wp_attachment_image_alt',
                            'value': alt_text
                        })
                        
                        logger.info(f"üè∑Ô∏è Alt text configurado: '{alt_text}'")
                    
                    # Actualizar el attachment con los nuevos metadatos
                    resultado = self.wordpress_client.call(posts.EditPost(attachment_id, attachment_post))
                    
                    if resultado:
                        logger.info("‚úÖ Metadatos de imagen actualizados correctamente")
                    else:
                        logger.warning("‚ö†Ô∏è Posible problema actualizando metadatos")
                    
                    # Verificaci√≥n adicional: intentar obtener el post actualizado
                    verification = self.wordpress_client.call(posts.GetPost(attachment_id))
                    if verification and hasattr(verification, 'custom_fields'):
                        alt_found = any(
                            cf.get('key') == '_wp_attachment_image_alt' and cf.get('value') == alt_text
                            for cf in (verification.custom_fields or [])
                        )
                        if alt_found:
                            logger.info("‚úÖ Alt text verificado correctamente")
                        else:
                            logger.warning("‚ö†Ô∏è Alt text no se verific√≥ - puede haber un problema")
                    
                except Exception as e:
                    logger.error(f"‚ùå Error configurando metadatos de imagen: {e}")
                    # Continuar con el ID de la imagen aunque fallen los metadatos
                
                return attachment_id
            else:
                logger.error(f"‚ùå Error en respuesta de upload: {respuesta}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Error subiendo imagen: {e}")
            return None

    async def publicar_wordpress(self, datos_articulo: Dict, attachment_id: Optional[int] = None) -> Tuple[Optional[int], Optional[str]]:
        """Publicar art√≠culo en WordPress con SEO completo"""
        try:
            from wordpress_xmlrpc import WordPressPost
            
            # Crear post
            post = WordPressPost()
            post.title = datos_articulo['titulo']
            post.content = datos_articulo['contenido_html']
            post.excerpt = datos_articulo['metadescripcion']
            post.slug = datos_articulo['slug']
            post.post_status = 'publish'
            
            # Configurar campos SEO de Yoast
            custom_fields = []
            
            # Meta descripci√≥n
            custom_fields.append({
                'key': '_yoast_wpseo_metadesc',
                'value': datos_articulo['metadescripcion']
            })
            
            # Palabra clave focus
            custom_fields.append({
                'key': '_yoast_wpseo_focuskw',
                'value': datos_articulo['palabra_clave']
            })
            
            # T√≠tulo SEO
            custom_fields.append({
                'key': '_yoast_wpseo_title',
                'value': datos_articulo['titulo']
            })
            
            post.custom_fields = custom_fields
            
            # Configurar taxonom√≠as
            try:
                categoria = datos_articulo.get('categoria', 'Actualidad')
                # Verificar que la categor√≠a existe
                if categoria not in self.wordpress_categories:
                    categoria = 'Actualidad'
                    
                post.terms_names = {'category': [categoria]}
                
                tags = datos_articulo.get('tags', [])
                if tags:
                    post.terms_names['post_tag'] = tags
                    
                logger.info(f"üìÇ Categor√≠a: {categoria}, Tags: {tags}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error configurando taxonom√≠as: {e}")
            
            # Imagen destacada
            if attachment_id:
                post.thumbnail = attachment_id
                logger.info(f"üñºÔ∏è Imagen destacada: ID {attachment_id}")
            
            # Publicar
            logger.info("üìù Publicando art√≠culo...")
            post_id = self.wordpress_client.call(posts.NewPost(post))
            
            if post_id:
                logger.info(f"‚úÖ Art√≠culo publicado - ID: {post_id}")
                self.stats['articulos_creados'] += 1
                return post_id, post.title
            else:
                logger.error("‚ùå Error: post_id es None")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico publicando en WordPress: {e}")
            self.stats['errores'] += 1
            return None, None

    async def handle_message_with_photo(self, update: Update, context):
        """Manejar mensaje con foto - L√ìGICA v1.1.3 MEJORADA"""
        try:
            logger.info("üì∏ Procesando mensaje con foto")
            
            # Obtener datos
            photo = update.message.photo[-1]
            texto_usuario = update.message.caption or ""
            
            if not texto_usuario.strip():
                await self.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå Inclu√≠ texto con la imagen para generar el art√≠culo."
                )
                return
            
            logger.info(f"üìù Texto: {texto_usuario}")
            
            # Extraer palabra clave INTELIGENTE
            palabra_clave = self._extraer_palabra_clave_inteligente(texto_usuario)
            
            # Descargar imagen
            file = await self.bot.get_file(photo.file_id)
            imagen_data = await file.download_as_bytearray()
            
            # Generar nombre con timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            nombre_archivo = f"imagen_{timestamp}.jpg"
            
            # Configurar t√≠tulo y alt text MEJORADOS
            titulo_imagen = palabra_clave.title()
            alt_text_imagen = palabra_clave
            
            logger.info(f"üñºÔ∏è Configurando imagen: t√≠tulo='{titulo_imagen}', alt='{alt_text_imagen}'")
            
            # Subir imagen con metadatos CORREGIDOS
            attachment_id = await self.subir_imagen_wordpress_v3(
                bytes(imagen_data), 
                nombre_archivo,
                alt_text=alt_text_imagen,
                titulo=titulo_imagen
            )
            
            if not attachment_id:
                await self.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå Error subiendo imagen"
                )
                return
            
            # Generar art√≠culo con MODELO ACTUALIZADO
            logger.info("ü§ñ Generando art√≠culo profesional...")
            datos_articulo = await self.generar_articulo_ia(texto_usuario, palabra_clave)
            
            if not datos_articulo:
                await self.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå Error generando art√≠culo"
                )
                return
            
            logger.info("‚úÖ Art√≠culo SEO FINAL PERFECTO generado")
            
            # Publicar
            logger.info("üöÄ Iniciando publicaci√≥n en WordPress...")
            post_id, titulo_post = await self.publicar_wordpress(datos_articulo, attachment_id)
            
            if post_id:
                self.stats['imagenes_procesadas'] += 1
                
                # Validar densidad de keywords para reporte
                contenido = datos_articulo.get('contenido_html', '')
                keyword_count = contenido.lower().count(palabra_clave.lower())
                
                await self.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚úÖ ¬°Art√≠culo publicado!\n\nüì∞ {titulo_post}\nüÜî ID: {post_id}\nüéØ Keyword: {palabra_clave} ({keyword_count}x)\nüñºÔ∏è Imagen + Alt: ‚úÖ\nüìä SEO: ‚úÖ\nüìÇ Categor√≠a: {datos_articulo.get('categoria', 'N/A')}"
                )
                logger.info(f"‚úÖ √âXITO TOTAL - Post ID: {post_id}")
            else:
                await self.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå Error publicando art√≠culo"
                )
                
        except Exception as e:
            logger.error(f"‚ùå Error procesando imagen: {e}")
            self.stats['errores'] += 1
            await self.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ùå Error procesando mensaje: {str(e)}"
            )

    async def start_command(self, update: Update, context):
        """Comando /start"""
        mensaje_bienvenida = """
ü§ñ *Bot de Automatizaci√≥n Period√≠stica v1.1.3*

üì∏ Envi√° una imagen con texto y creo autom√°ticamente:
‚Ä¢ ‚úÖ Art√≠culo SEO optimizado (densidad corregida)
‚Ä¢ ‚úÖ Imagen destacada con alt text funcional
‚Ä¢ ‚úÖ Keywords inteligentes seg√∫n contexto
‚Ä¢ ‚úÖ Categor√≠as WordPress reales
‚Ä¢ ‚úÖ Publicaci√≥n completa

üìä `/stats` - Ver estad√≠sticas
"""
        
        await self.bot.send_message(
            chat_id=update.effective_chat.id,
            text=mensaje_bienvenida,
            parse_mode='Markdown'
        )

    async def stats_command(self, update: Update, context):
        """Comando /stats"""
        stats_text = f"""
üìä *Estad√≠sticas del Sistema v1.1.3*

üì∞ Art√≠culos creados: {self.stats['articulos_creados']}
üñºÔ∏è Im√°genes procesadas: {self.stats['imagenes_procesadas']}
‚ùå Errores: {self.stats['errores']}
üïê Inicio: {self.stats['inicio_sistema']}
üìÇ Categor√≠as disponibles: {len(self.wordpress_categories)}
"""
        
        await self.bot.send_message(
            chat_id=update.effective_chat.id,
            text=stats_text,
            parse_mode='Markdown'
        )

    async def handle_text_only_message(self, update: Update, context):
        """Manejar mensaje solo texto"""
        await self.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì∏ Envi√° una imagen con texto para generar un art√≠culo autom√°ticamente."
        )

# Configuraci√≥n Flask
app = Flask(__name__)

# Instancia global del sistema
sistema = AutomacionPeriodisticaV1()

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint principal del webhook de Telegram - L√ìGICA CONSERVADA"""
    try:
        # Obtener datos JSON
        json_data = request.get_json()
        
        if not json_data:
            logger.warning("Webhook recibido sin datos JSON")
            return jsonify({'error': 'No JSON data received'}), 400
        
        # Crear objeto Update de Telegram
        update = Update.de_json(json_data, sistema.bot)
        
        if not update or not update.message:
            return jsonify({'status': 'no_message'}), 200
        
        # Procesar mensaje seg√∫n tipo
        if update.message.photo:
            # Mensaje con foto - usar asyncio para procesamiento
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(sistema.handle_message_with_photo(update, None))
            finally:
                loop.close()
                
        elif update.message.text:
            # Procesar comandos especiales
            if update.message.text.startswith('/start'):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(sistema.start_command(update, None))
                finally:
                    loop.close()
                    
            elif update.message.text.startswith('/stats'):
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(sistema.stats_command(update, None))
                finally:
                    loop.close()
                    
            else:
                # Mensaje normal de texto
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(sistema.handle_text_only_message(update, None))
                finally:
                    loop.close()
        
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"Error cr√≠tico en webhook: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health_check():
    """Endpoint de verificaci√≥n de salud del sistema"""
    try:
        # Verificar estado de servicios
        services_status = {
            'groq': sistema.groq_client is not None,
            'wordpress': sistema.wordpress_client is not None,
            'telegram': sistema.bot is not None,
            'categorias_cargadas': len(sistema.wordpress_categories) > 0
        }
        
        all_services_ok = all(services_status.values())
        
        return jsonify({
            'status': 'healthy' if all_services_ok else 'degraded',
            'version': 'v1.1.3',
            'timestamp': datetime.now().isoformat(),
            'services': services_status,
            'stats': sistema.stats,
            'categorias_disponibles': sistema.wordpress_categories
        }), 200 if all_services_ok else 503
        
    except Exception as e:
        logger.error(f"Error en health check: {e}")
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/')
def index():
    """P√°gina principal b√°sica"""
    return jsonify({
        'service': 'Automatizaci√≥n Period√≠stica',
        'version': 'v1.1.3',
        'status': 'running',
        'documentation': '/health para estado del sistema'
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ Iniciando servidor Flask en puerto {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
